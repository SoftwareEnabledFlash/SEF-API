"use strict";(self.webpackChunkweb_doc=self.webpackChunkweb_doc||[]).push([[167],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return d}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=c(n),d=i,m=p["".concat(u,".").concat(d)]||p[d]||f[d]||a;return n?r.createElement(m,o(o({ref:t},l),{},{components:n})):r.createElement(m,o({ref:t},l))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=p;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8681:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return f}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],s={sidebar_position:5},u="SEF Unit",c={unversionedId:"sef-unit",id:"sef-unit",title:"SEF Unit",description:"chap-SEFUnit}",source:"@site/docs/sef-unit.md",sourceDirName:".",slug:"/sef-unit",permalink:"/sef-unit",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Design Strategy",permalink:"/strategy"},next:{title:"Virtual Devices",permalink:"/virtual-devices"}},l={},f=[{value:"Figure 3: SEF Unit Geometry",id:"fig-SefUnitGeometry",level:4},{value:"Figure 4: Die Geometry",id:"fig-DieGeometry",level:4}],p={toc:f};function d(e){var t=e.components,s=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"chap-SEFUnit"},"SEF Unit"),(0,a.kt)("p",null,"A SEF Unit is a set of dies and the associated control logic and (optional) DRAM. User-defined\nlists of dies form a many-to-one mapping of dies to a virtual device. A virtual device represents\nphysical isolation with the number of virtual devices limited by the number of dies in the SEF Unit.\nFigure ",(0,a.kt)("a",{parentName:"p",href:"#fig-SefUnitGeometry"},"3")," shows an example of three virtual devices overlaid on an 8 x 4\nSEF Unit with eight dies left unallocated."),(0,a.kt)("h4",{id:"fig-SefUnitGeometry"},"Figure 3: SEF Unit Geometry"),(0,a.kt)("p",null,(0,a.kt)("img",{loading:"lazy",alt:"SEF Unit Geometry",src:n(7437).Z,width:"869",height:"529"})),(0,a.kt)("p",null,"As shown in Figure ",(0,a.kt)("a",{parentName:"p",href:"#fig-DieGeometry"},"4"),", a die is a set of blocks. The blocks are the erase unit\nfor a SEF Unit and consist of a set of pages. A page spans the die planes and is the programing\nunit. A plane is made up of atomic data units (ADUs). An ADU is the read/write unit holding\nboth user data and metadata. Metadata consists of a user-defined tag data (UA) and a configured\nnumber of user supplied metadata (MD)."),(0,a.kt)("h4",{id:"fig-DieGeometry"},"Figure 4: Die Geometry"),(0,a.kt)("p",null,(0,a.kt)("img",{loading:"lazy",alt:"Die Geometry",src:n(6090).Z,width:"960",height:"494"})))}d.isMDXComponent=!0},6090:function(e,t,n){t.Z=n.p+"assets/images/die-geometry-6f15e3dc0ca60392858ba0c9435b6751.png"},7437:function(e,t,n){t.Z=n.p+"assets/images/sef-unit-geometry-8d68f46dd5e2aaa19a2076e727e9de73.png"}}]);
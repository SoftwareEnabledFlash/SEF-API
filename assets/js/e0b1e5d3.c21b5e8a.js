"use strict";(self.webpackChunkweb_doc=self.webpackChunkweb_doc||[]).push([[299],{3905:function(t,e,a){a.d(e,{Zo:function(){return d},kt:function(){return k}});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function u(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var o=n.createContext({}),s=function(t){var e=n.useContext(o),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},d=function(t){var e=s(t.components);return n.createElement(o.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,o=t.parentName,d=u(t,["components","mdxType","originalType","parentName"]),m=s(a),k=r,N=m["".concat(o,".").concat(k)]||m[k]||p[k]||l;return a?n.createElement(N,i(i({ref:e},d),{},{components:a})):n.createElement(N,i({ref:e},d))}));function k(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=m;var u={};for(var o in e)hasOwnProperty.call(e,o)&&(u[o]=e[o]);u.originalType=t,u.mdxType="string"==typeof t?t:r,i[1]=u;for(var s=2;s<l;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6755:function(t,e,a){a.r(e),a.d(e,{assets:function(){return d},contentTitle:function(){return o},default:function(){return k},frontMatter:function(){return u},metadata:function(){return s},toc:function(){return p}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=["components"],u={},o="API Management Commands",s={unversionedId:"SEF_API/sef-api00",id:"SEF_API/sef-api00",title:"API Management Commands",description:"SEFLibraryInit",source:"@site/docs/SEF_API/sef-api00.md",sourceDirName:"SEF_API",slug:"/SEF_API/sef-api00",permalink:"/SEF_API/sef-api00",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Addressing",permalink:"/addressing"},next:{title:"Data Access Commands",permalink:"/SEF_API/sef-api01"}},d={},p=[{value:"SEFLibraryInit",id:"function-SEFLibraryInit",level:2},{value:"Return value of SEFLibraryInit",id:"return-value-of-seflibraryinit",level:4},{value:"Return values of SEFLibraryInit",id:"return-values-of-seflibraryinit",level:4},{value:"SEFGetHandle",id:"function-SEFGetHandle",level:2},{value:"Parameters of SEFGetHandle",id:"parameters-of-sefgethandle",level:4},{value:"Return value of SEFGetHandle",id:"return-value-of-sefgethandle",level:4},{value:"SEFLibraryCleanup",id:"function-SEFLibraryCleanup",level:2},{value:"Return value of SEFLibraryCleanup",id:"return-value-of-seflibrarycleanup",level:4},{value:"Return values of SEFLibraryCleanup",id:"return-values-of-seflibrarycleanup",level:4},{value:"SEFGetInformation",id:"function-SEFGetInformation",level:2},{value:"Parameters of SEFGetInformation",id:"parameters-of-sefgetinformation",level:4},{value:"Return value of SEFGetInformation",id:"return-value-of-sefgetinformation",level:4},{value:"SEFListVirtualDevices",id:"function-SEFListVirtualDevices",level:2},{value:"Parameters of SEFListVirtualDevices",id:"parameters-of-seflistvirtualdevices",level:4},{value:"Return value of SEFListVirtualDevices",id:"return-value-of-seflistvirtualdevices",level:4},{value:"Return values of SEFListVirtualDevices",id:"return-values-of-seflistvirtualdevices",level:4},{value:"SEFListQoSDomains",id:"function-SEFListQoSDomains",level:2},{value:"Parameters of SEFListQoSDomains",id:"parameters-of-seflistqosdomains",level:4},{value:"Return value of SEFListQoSDomains",id:"return-value-of-seflistqosdomains",level:4},{value:"Return values of SEFListQoSDomains",id:"return-values-of-seflistqosdomains",level:4},{value:"SEFGetUserAddressMeta",id:"function-SEFGetUserAddressMeta",level:2},{value:"Parameters of SEFGetUserAddressMeta",id:"parameters-of-sefgetuseraddressmeta",level:4},{value:"Return value of SEFGetUserAddressMeta",id:"return-value-of-sefgetuseraddressmeta",level:4},{value:"SEFGetUserAddressLba",id:"function-SEFGetUserAddressLba",level:2},{value:"Parameters of SEFGetUserAddressLba",id:"parameters-of-sefgetuseraddresslba",level:4},{value:"Return value of SEFGetUserAddressLba",id:"return-value-of-sefgetuseraddresslba",level:4},{value:"SEFParseUserAddress",id:"function-SEFParseUserAddress",level:2},{value:"Parameters of SEFParseUserAddress",id:"parameters-of-sefparseuseraddress",level:4},{value:"SEFCreateUserAddress",id:"function-SEFCreateUserAddress",level:2},{value:"Parameters of SEFCreateUserAddress",id:"parameters-of-sefcreateuseraddress",level:4},{value:"Return value of SEFCreateUserAddress",id:"return-value-of-sefcreateuseraddress",level:4},{value:"SEFCreateVirtualDevices",id:"function-SEFCreateVirtualDevices",level:2},{value:"Parameters of SEFCreateVirtualDevices",id:"parameters-of-sefcreatevirtualdevices",level:4},{value:"Return value of SEFCreateVirtualDevices",id:"return-value-of-sefcreatevirtualdevices",level:4},{value:"Return values of SEFCreateVirtualDevices",id:"return-values-of-sefcreatevirtualdevices",level:4},{value:"SEFSetNumberOfPSLCSuperBlocks",id:"function-SEFSetNumberOfPSLCSuperBlocks",level:2},{value:"Parameters of SEFSetNumberOfPSLCSuperBlocks",id:"parameters-of-sefsetnumberofpslcsuperblocks",level:4},{value:"Return values of SEFSetNumberOfPSLCSuperBlocks",id:"return-values-of-sefsetnumberofpslcsuperblocks",level:4},{value:"SEFGetVirtualDeviceUsage",id:"function-SEFGetVirtualDeviceUsage",level:2},{value:"Parameters of SEFGetVirtualDeviceUsage",id:"parameters-of-sefgetvirtualdeviceusage",level:4},{value:"Return value of SEFGetVirtualDeviceUsage",id:"return-value-of-sefgetvirtualdeviceusage",level:4},{value:"Return values of SEFGetVirtualDeviceUsage",id:"return-values-of-sefgetvirtualdeviceusage",level:4},{value:"SEFGetDieList",id:"function-SEFGetDieList",level:2},{value:"Parameters of SEFGetDieList",id:"parameters-of-sefgetdielist",level:4},{value:"Return value of SEFGetDieList",id:"return-value-of-sefgetdielist",level:4},{value:"Return values of SEFGetDieList",id:"return-values-of-sefgetdielist",level:4},{value:"SEFGetVirtualDeviceInformation",id:"function-SEFGetVirtualDeviceInformation",level:2},{value:"Parameters of SEFGetVirtualDeviceInformation",id:"parameters-of-sefgetvirtualdeviceinformation",level:4},{value:"Return value of SEFGetVirtualDeviceInformation",id:"return-value-of-sefgetvirtualdeviceinformation",level:4},{value:"Return values of SEFGetVirtualDeviceInformation",id:"return-values-of-sefgetvirtualdeviceinformation",level:4},{value:"SEFSetVirtualDeviceSuspendConfig",id:"function-SEFSetVirtualDeviceSuspendConfig",level:2},{value:"Parameters of SEFSetVirtualDeviceSuspendConfig",id:"parameters-of-sefsetvirtualdevicesuspendconfig",level:4},{value:"Return values of SEFSetVirtualDeviceSuspendConfig",id:"return-values-of-sefsetvirtualdevicesuspendconfig",level:4},{value:"SEFCreateQoSDomain",id:"function-SEFCreateQoSDomain",level:2},{value:"Parameters of SEFCreateQoSDomain",id:"parameters-of-sefcreateqosdomain",level:4},{value:"Return value of SEFCreateQoSDomain",id:"return-value-of-sefcreateqosdomain",level:4},{value:"Return values of SEFCreateQoSDomain",id:"return-values-of-sefcreateqosdomain",level:4},{value:"SEFSetQoSDomainCapacity",id:"function-SEFSetQoSDomainCapacity",level:2},{value:"Parameters of SEFSetQoSDomainCapacity",id:"parameters-of-sefsetqosdomaincapacity",level:4},{value:"Return value of SEFSetQoSDomainCapacity",id:"return-value-of-sefsetqosdomaincapacity",level:4},{value:"Return values of SEFSetQoSDomainCapacity",id:"return-values-of-sefsetqosdomaincapacity",level:4},{value:"SEFSetRootPointer",id:"function-SEFSetRootPointer",level:2},{value:"Parameters of SEFSetRootPointer",id:"parameters-of-sefsetrootpointer",level:4},{value:"Return value of SEFSetRootPointer",id:"return-value-of-sefsetrootpointer",level:4},{value:"Return values of SEFSetRootPointer",id:"return-values-of-sefsetrootpointer",level:4},{value:"SEFSetReadDeadline",id:"function-SEFSetReadDeadline",level:2},{value:"Parameters of SEFSetReadDeadline",id:"parameters-of-sefsetreaddeadline",level:4},{value:"Return value of SEFSetReadDeadline",id:"return-value-of-sefsetreaddeadline",level:4},{value:"Return values of SEFSetReadDeadline",id:"return-values-of-sefsetreaddeadline",level:4},{value:"SEFGetSuperBlockList",id:"function-SEFGetSuperBlockList",level:2},{value:"Parameters of SEFGetSuperBlockList",id:"parameters-of-sefgetsuperblocklist",level:4},{value:"Return value of SEFGetSuperBlockList",id:"return-value-of-sefgetsuperblocklist",level:4},{value:"Return values of SEFGetSuperBlockList",id:"return-values-of-sefgetsuperblocklist",level:4},{value:"SEFGetQoSDomainInformation",id:"function-SEFGetQoSDomainInformation",level:2},{value:"Parameters of SEFGetQoSDomainInformation",id:"parameters-of-sefgetqosdomaininformation",level:4},{value:"Return value of SEFGetQoSDomainInformation",id:"return-value-of-sefgetqosdomaininformation",level:4},{value:"Return values of SEFGetQoSDomainInformation",id:"return-values-of-sefgetqosdomaininformation",level:4},{value:"SEFGetReuseList",id:"function-SEFGetReuseList",level:2},{value:"Parameters of SEFGetReuseList",id:"parameters-of-sefgetreuselist",level:4},{value:"Return value of SEFGetReuseList",id:"return-value-of-sefgetreuselist",level:4},{value:"Return values of SEFGetReuseList",id:"return-values-of-sefgetreuselist",level:4},{value:"SEFGetRefreshList",id:"function-SEFGetRefreshList",level:2},{value:"Parameters of SEFGetRefreshList",id:"parameters-of-sefgetrefreshlist",level:4},{value:"Return value of SEFGetRefreshList",id:"return-value-of-sefgetrefreshlist",level:4},{value:"Return values of SEFGetRefreshList",id:"return-values-of-sefgetrefreshlist",level:4},{value:"SEFGetCheckList",id:"function-SEFGetCheckList",level:2},{value:"Parameters of SEFGetCheckList",id:"parameters-of-sefgetchecklist",level:4},{value:"Return value of SEFGetCheckList",id:"return-value-of-sefgetchecklist",level:4},{value:"Return values of SEFGetCheckList",id:"return-values-of-sefgetchecklist",level:4},{value:"SEFGetUserAddressList",id:"function-SEFGetUserAddressList",level:2},{value:"Parameters of SEFGetUserAddressList",id:"parameters-of-sefgetuseraddresslist",level:4},{value:"Return value of SEFGetUserAddressList",id:"return-value-of-sefgetuseraddresslist",level:4},{value:"Return values of SEFGetUserAddressList",id:"return-values-of-sefgetuseraddresslist",level:4},{value:"SEFGetSuperBlockInfo",id:"function-SEFGetSuperBlockInfo",level:2},{value:"Parameters of SEFGetSuperBlockInfo",id:"parameters-of-sefgetsuperblockinfo",level:4},{value:"Return value of SEFGetSuperBlockInfo",id:"return-value-of-sefgetsuperblockinfo",level:4},{value:"Return values of SEFGetSuperBlockInfo",id:"return-values-of-sefgetsuperblockinfo",level:4},{value:"SEFCheckSuperBlock",id:"function-SEFCheckSuperBlock",level:2},{value:"Parameters of SEFCheckSuperBlock",id:"parameters-of-sefchecksuperblock",level:4},{value:"Return value of SEFCheckSuperBlock",id:"return-value-of-sefchecksuperblock",level:4},{value:"Return values of SEFCheckSuperBlock",id:"return-values-of-sefchecksuperblock",level:4},{value:"SEFDeleteVirtualDevices",id:"function-SEFDeleteVirtualDevices",level:2},{value:"Parameters of SEFDeleteVirtualDevices",id:"parameters-of-sefdeletevirtualdevices",level:4},{value:"Return value of SEFDeleteVirtualDevices",id:"return-value-of-sefdeletevirtualdevices",level:4},{value:"Return values of SEFDeleteVirtualDevices",id:"return-values-of-sefdeletevirtualdevices",level:4},{value:"SEFDeleteQoSDomain",id:"function-SEFDeleteQoSDomain",level:2},{value:"Parameters of SEFDeleteQoSDomain",id:"parameters-of-sefdeleteqosdomain",level:4},{value:"Return value of SEFDeleteQoSDomain",id:"return-value-of-sefdeleteqosdomain",level:4},{value:"Return values of SEFDeleteQoSDomain",id:"return-values-of-sefdeleteqosdomain",level:4},{value:"SEFResetEncryptionKey",id:"function-SEFResetEncryptionKey",level:2},{value:"Parameters of SEFResetEncryptionKey",id:"parameters-of-sefresetencryptionkey",level:4},{value:"Return value of SEFResetEncryptionKey",id:"return-value-of-sefresetencryptionkey",level:4},{value:"Return values of SEFResetEncryptionKey",id:"return-values-of-sefresetencryptionkey",level:4},{value:"SEFOpenVirtualDevice",id:"function-SEFOpenVirtualDevice",level:2},{value:"Parameters of SEFOpenVirtualDevice",id:"parameters-of-sefopenvirtualdevice",level:4},{value:"Return value of SEFOpenVirtualDevice",id:"return-value-of-sefopenvirtualdevice",level:4},{value:"Return values of SEFOpenVirtualDevice",id:"return-values-of-sefopenvirtualdevice",level:4},{value:"SEFCloseVirtualDevice",id:"function-SEFCloseVirtualDevice",level:2},{value:"Parameters of SEFCloseVirtualDevice",id:"parameters-of-sefclosevirtualdevice",level:4},{value:"Return value of SEFCloseVirtualDevice",id:"return-value-of-sefclosevirtualdevice",level:4},{value:"Return values of SEFCloseVirtualDevice",id:"return-values-of-sefclosevirtualdevice",level:4},{value:"SEFOpenQoSDomain",id:"function-SEFOpenQoSDomain",level:2},{value:"Parameters of SEFOpenQoSDomain",id:"parameters-of-sefopenqosdomain",level:4},{value:"Return value of SEFOpenQoSDomain",id:"return-value-of-sefopenqosdomain",level:4},{value:"Return values of SEFOpenQoSDomain",id:"return-values-of-sefopenqosdomain",level:4},{value:"SEFCloseQoSDomain",id:"function-SEFCloseQoSDomain",level:2},{value:"Parameters of SEFCloseQoSDomain",id:"parameters-of-sefcloseqosdomain",level:4},{value:"Return value of SEFCloseQoSDomain",id:"return-value-of-sefcloseqosdomain",level:4},{value:"Return values of SEFCloseQoSDomain",id:"return-values-of-sefcloseqosdomain",level:4},{value:"SEFGetQoSHandleProperty",id:"function-SEFGetQoSHandleProperty",level:2},{value:"Parameters of SEFGetQoSHandleProperty",id:"parameters-of-sefgetqoshandleproperty",level:4},{value:"Return value of SEFGetQoSHandleProperty",id:"return-value-of-sefgetqoshandleproperty",level:4},{value:"SEFSetQoSHandleProperty",id:"function-SEFSetQoSHandleProperty",level:2},{value:"Parameters of SEFSetQoSHandleProperty",id:"parameters-of-sefsetqoshandleproperty",level:4},{value:"Return value of SEFSetQoSHandleProperty",id:"return-value-of-sefsetqoshandleproperty",level:4},{value:"Return values of SEFSetQoSHandleProperty",id:"return-values-of-sefsetqoshandleproperty",level:4},{value:"SEFParseFlashAddress",id:"function-SEFParseFlashAddress",level:2},{value:"Parameters of SEFParseFlashAddress",id:"parameters-of-sefparseflashaddress",level:4},{value:"Return value of SEFParseFlashAddress",id:"return-value-of-sefparseflashaddress",level:4},{value:"SEFCreateFlashAddress",id:"function-SEFCreateFlashAddress",level:2},{value:"Parameters of SEFCreateFlashAddress",id:"parameters-of-sefcreateflashaddress",level:4},{value:"Return value of SEFCreateFlashAddress",id:"return-value-of-sefcreateflashaddress",level:4},{value:"SEFReleaseSuperBlock",id:"function-SEFReleaseSuperBlock",level:2},{value:"Parameters of SEFReleaseSuperBlock",id:"parameters-of-sefreleasesuperblock",level:4},{value:"Return value of SEFReleaseSuperBlock",id:"return-value-of-sefreleasesuperblock",level:4},{value:"Return values of SEFReleaseSuperBlock",id:"return-values-of-sefreleasesuperblock",level:4},{value:"SEFAllocateSuperBlock",id:"function-SEFAllocateSuperBlock",level:2},{value:"Parameters of SEFAllocateSuperBlock",id:"parameters-of-sefallocatesuperblock",level:4},{value:"Return value of SEFAllocateSuperBlock",id:"return-value-of-sefallocatesuperblock",level:4},{value:"Return values of SEFAllocateSuperBlock",id:"return-values-of-sefallocatesuperblock",level:4},{value:"SEFFlushSuperBlock",id:"function-SEFFlushSuperBlock",level:2},{value:"Parameters of SEFFlushSuperBlock",id:"parameters-of-sefflushsuperblock",level:4},{value:"Return value of SEFFlushSuperBlock",id:"return-value-of-sefflushsuperblock",level:4},{value:"Return values of SEFFlushSuperBlock",id:"return-values-of-sefflushsuperblock",level:4},{value:"SEFCloseSuperBlock",id:"function-SEFCloseSuperBlock",level:2},{value:"Parameters of SEFCloseSuperBlock",id:"parameters-of-sefclosesuperblock",level:4},{value:"Return value of SEFCloseSuperBlock",id:"return-value-of-sefclosesuperblock",level:4},{value:"Return values of SEFCloseSuperBlock",id:"return-values-of-sefclosesuperblock",level:4},{value:"SEFReleaseSuperBlockAsync",id:"function-SEFReleaseSuperBlockAsync",level:2},{value:"Parameters of SEFReleaseSuperBlockAsync",id:"parameters-of-sefreleasesuperblockasync",level:4},{value:"SEFAllocateSuperBlockAsync",id:"function-SEFAllocateSuperBlockAsync",level:2},{value:"Parameters of SEFAllocateSuperBlockAsync",id:"parameters-of-sefallocatesuperblockasync",level:4},{value:"SEFCloseSuperBlockAsync",id:"function-SEFCloseSuperBlockAsync",level:2},{value:"Parameters of SEFCloseSuperBlockAsync",id:"parameters-of-sefclosesuperblockasync",level:4}],m={toc:p};function k(t){var e=t.components,a=(0,r.Z)(t,i);return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"api-management-commands"},"API Management Commands"),(0,l.kt)("h2",{id:"function-SEFLibraryInit"},"SEFLibraryInit"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFLibraryInit(void)\n")),(0,l.kt)("p",null,"Initializes the SEF Library, enumerates the SEF Units present, and returns the number of units found.\nEvery successful call to SEFLibraryInit() must be balanced with a call to SEFLibraryCleanup()."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"See Also:")," ",(0,l.kt)("a",{parentName:"p",href:"/SEF_API/sef-api00#function-SEFLibraryCleanup"},"SEFLibraryCleanup()")," "),(0,l.kt)("h4",{id:"return-value-of-seflibraryinit"},"Return value of SEFLibraryInit"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-seflibraryinit"},"Return values of SEFLibraryInit"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"The info member returns the number of units")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFGetHandle"},"SEFGetHandle"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"SEFHandle SEFGetHandle(uint16_t index)\n")),(0,l.kt)("p",null,"Returns a handle to the SEF Unit at the specified index (zero based) "),(0,l.kt)("h4",{id:"parameters-of-sefgethandle"},"Parameters of SEFGetHandle"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,l.kt)("td",{parentName:"tr",align:null},"index"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Index of the SEF Unit")))),(0,l.kt)("h4",{id:"return-value-of-sefgethandle"},"Return value of SEFGetHandle"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the SEF Unit")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFLibraryCleanup"},"SEFLibraryCleanup"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFLibraryCleanup(void)\n")),(0,l.kt)("p",null,"Performs cleanup of the SEF Library and releases resources.\nEvery successful call to SEFLibraryInit() must be balanced with a call to SEFLibraryCleanup().\nNote: When the returned status error and info fields are zero, all open handles are closed, invalidated and are unusable."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"See Also:")," ",(0,l.kt)("a",{parentName:"p",href:"/SEF_API/sef-api00#function-SEFLibraryInit"},"SEFLibraryInit()")," "),(0,l.kt)("h4",{id:"return-value-of-seflibrarycleanup"},"Return value of SEFLibraryCleanup"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-seflibrarycleanup"},"Return values of SEFLibraryCleanup"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"The info field is the library's reference count.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The SEF Library was not initialized")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EWOULDBLOCK"),(0,l.kt)("td",{parentName:"tr",align:null},"This function cannot be called on a callback thread")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFGetInformation"},"SEFGetInformation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"const struct SEFInfo* SEFGetInformation(SEFHandle sefHandle)\n")),(0,l.kt)("p",null,"Gets device information.\nReturns ADU size(s), number of channels, number of dies, and other associated information. Dynamic values are refreshed just before the structure is returned."),(0,l.kt)("h4",{id:"parameters-of-sefgetinformation"},"Parameters of SEFGetInformation"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"sefHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the SEF Unit")))),(0,l.kt)("h4",{id:"return-value-of-sefgetinformation"},"Return value of SEFGetInformation"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"const struct SEFInfo *"),(0,l.kt)("td",{parentName:"tr",align:null},"SEFInfo struct or NULL if sefHandle is NULL.")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFListVirtualDevices"},"SEFListVirtualDevices"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFListVirtualDevices(SEFHandle sefHandle, struct SEFVirtualDeviceList *list, int bufferSize)\n")),(0,l.kt)("p",null,"Returns a list of the defined Virtual Devices.\nWhen list is NULL or insufficiently sized or bufferSize is 0, status.info returns the minimum buffer size for the complete list. The data that fits in an insufficiently sized buffer is valid but incomplete. The buffer must be at least the size of the list structure."),(0,l.kt)("h4",{id:"parameters-of-seflistvirtualdevices"},"Parameters of SEFListVirtualDevices"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"sefHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the SEF Unit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFVirtualDeviceList"},"struct SEFVirtualDeviceList*")),(0,l.kt)("td",{parentName:"tr",align:null},"list"),(0,l.kt)("td",{parentName:"tr",align:null},"Out"),(0,l.kt)("td",{parentName:"tr",align:null},"Buffer for storing list of Virtual Devices")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"bufferSize"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Buffer size")))),(0,l.kt)("h4",{id:"return-value-of-seflistvirtualdevices"},"Return value of SEFListVirtualDevices"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-seflistvirtualdevices"},"Return values of SEFListVirtualDevices"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The SEF Handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The function parameter is not valid; info returns the parameter index that is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"info field returns the minimum buffer size if the buffer is insufficient or NULL; otherwise, 0")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFListQoSDomains"},"SEFListQoSDomains"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFListQoSDomains(SEFHandle sefHandle, struct SEFQoSDomainList *list, int bufferSize)\n")),(0,l.kt)("p",null,"Returns a list of the defined QoS Domains.\nWhen list is NULL or insufficiently sized or bufferSize is 0, status.info returns the minimum buffer size for the complete list. The data that fits in an insufficiently sized buffer is valid but incomplete. The buffer must be at least the size of the list structure."),(0,l.kt)("h4",{id:"parameters-of-seflistqosdomains"},"Parameters of SEFListQoSDomains"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"sefHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the SEF Unit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFQoSDomainList"},"struct SEFQoSDomainList*")),(0,l.kt)("td",{parentName:"tr",align:null},"list"),(0,l.kt)("td",{parentName:"tr",align:null},"Out"),(0,l.kt)("td",{parentName:"tr",align:null},"Buffer for storing list of QoS Domains")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"bufferSize"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Buffer size")))),(0,l.kt)("h4",{id:"return-value-of-seflistqosdomains"},"Return value of SEFListQoSDomains"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-seflistqosdomains"},"Return values of SEFListQoSDomains"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The SEF Handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The function parameter is not valid; info returns the parameter index that is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"info field returns the minimum buffer size if the buffer is insufficient or NULL; otherwise, 0")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFGetUserAddressMeta"},"SEFGetUserAddressMeta"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"static uint32_t SEFGetUserAddressMeta(struct SEFUserAddress userAddress)\n")),(0,l.kt)("h4",{id:"parameters-of-sefgetuseraddressmeta"},"Parameters of SEFGetUserAddressMeta"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFUserAddress"},"struct SEFUserAddress")),(0,l.kt)("td",{parentName:"tr",align:null},"userAddress"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"User address to be parsed")))),(0,l.kt)("h4",{id:"return-value-of-sefgetuseraddressmeta"},"Return value of SEFGetUserAddressMeta"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns meta value from a user address")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFGetUserAddressLba"},"SEFGetUserAddressLba"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"static uint64_t SEFGetUserAddressLba(struct SEFUserAddress userAddress)\n")),(0,l.kt)("h4",{id:"parameters-of-sefgetuseraddresslba"},"Parameters of SEFGetUserAddressLba"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFUserAddress"},"struct SEFUserAddress")),(0,l.kt)("td",{parentName:"tr",align:null},"userAddress"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"User address to be parsed")))),(0,l.kt)("h4",{id:"return-value-of-sefgetuseraddresslba"},"Return value of SEFGetUserAddressLba"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uint64","_","t"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns LBA value from a user address")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFParseUserAddress"},"SEFParseUserAddress"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"static void SEFParseUserAddress(struct SEFUserAddress userAddress, uint64_t *lba, uint32_t *meta)\n")),(0,l.kt)("p",null,"Return LBA and meta values from a user address. "),(0,l.kt)("h4",{id:"parameters-of-sefparseuseraddress"},"Parameters of SEFParseUserAddress"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFUserAddress"},"struct SEFUserAddress")),(0,l.kt)("td",{parentName:"tr",align:null},"userAddress"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"User address to be parsed")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uint64","_","t *"),(0,l.kt)("td",{parentName:"tr",align:null},"lba"),(0,l.kt)("td",{parentName:"tr",align:null},"Out"),(0,l.kt)("td",{parentName:"tr",align:null},"Lba parsed from the user address")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uint32","_","t *"),(0,l.kt)("td",{parentName:"tr",align:null},"meta"),(0,l.kt)("td",{parentName:"tr",align:null},"Out"),(0,l.kt)("td",{parentName:"tr",align:null},"Meta parsed from the user address")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFCreateUserAddress"},"SEFCreateUserAddress"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"static struct SEFUserAddress SEFCreateUserAddress(uint64_t lba, uint32_t meta)\n")),(0,l.kt)("p",null,"Creates a user address from lba and meta values. "),(0,l.kt)("h4",{id:"parameters-of-sefcreateuseraddress"},"Parameters of SEFCreateUserAddress"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uint64","_","t"),(0,l.kt)("td",{parentName:"tr",align:null},"lba"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"lba to be used to generate user address (40 bits)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,l.kt)("td",{parentName:"tr",align:null},"meta"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"meta to be used to generate user address (24 bits)")))),(0,l.kt)("h4",{id:"return-value-of-sefcreateuseraddress"},"Return value of SEFCreateUserAddress"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFUserAddress"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the user address created from lba and meta values")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFCreateVirtualDevices"},"SEFCreateVirtualDevices"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFCreateVirtualDevices(SEFHandle sefHandle, uint16_t numVirtualDevices, struct SEFVirtualDeviceConfig *const virtualDeviceConfigs[])\n")),(0,l.kt)("p",null,"Creates the Virtual Devices and allocates physical resources.\nConfiguring the virtual devices for a SEF Unit is only done during pre-production. Once the flash of a SEF Unit has been written to, it is not possible to change the Virtual Device configuration.\nConfiguration is accomplished by supplying a array of pointers to virtualDeviceConfigs. Each Virtual Device being configured will have a single array entry. Each of those entries contains a list of die IDs that will define a specific Virtual Device. The superBlockDies in the config must be 0 or evenly divide into the number of dies specified by the die list.\nValid die IDs start at 0 and are less than the total number of dies in a SEF Unit. The total number of dies is equal to SEFInfo::numBanks ",(0,l.kt)("em",{parentName:"p"}," SEFInfo::numChannels. The die ID of a die at channel CH, bank BNK, is equal to CH + BNK"),"SEFInfo::numChannels. The die IDs in the dieList in a virtual device configuration must be in ascending order. A die ID can only be used in at most one Virtual Device configuration. If a die is not included in any Virtual Device configuration, it will be lost capacity that can never be used."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"See Also:")," ",(0,l.kt)("a",{parentName:"p",href:"/SEF_API/sef-api00#function-SEFGetInformation"},"SEFGetInformation()")," "),(0,l.kt)("h4",{id:"parameters-of-sefcreatevirtualdevices"},"Parameters of SEFCreateVirtualDevices"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"sefHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the SEF Unit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,l.kt)("td",{parentName:"tr",align:null},"numVirtualDevices"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Number of entries in virtualDeviceConfigs")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFVirtualDeviceConfig"},"const struct SEFVirtualDeviceConfig[]*")),(0,l.kt)("td",{parentName:"tr",align:null},"virtualDeviceConfigs"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Pointers to configurations describing how to create the virtual devices")))),(0,l.kt)("h4",{id:"return-value-of-sefcreatevirtualdevices"},"Return value of SEFCreateVirtualDevices"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result. Returns 0 on success and negative value on error.")))),(0,l.kt)("h4",{id:"return-values-of-sefcreatevirtualdevices"},"Return values of SEFCreateVirtualDevices"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The SEF Handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The function parameter is not valid; info returns the parameter index that is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EACCES"),(0,l.kt)("td",{parentName:"tr",align:null},"You don't have the needed permission to perform this operation")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFSetNumberOfPSLCSuperBlocks"},"SEFSetNumberOfPSLCSuperBlocks"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFSetNumberOfPSLCSuperBlocks(SEFVDHandle vdHandle, uint32_t numPSLCSuperBlocks)\n")),(0,l.kt)("p",null,"Sets the number of pSLC super blocks.\nThis defines the number of regular super blocks which are transformed to use as pSLC super blocks. Because it applies to all the dies in the Virtual Device, the value must be a multiple of the ratio of the number of dies in the Virtual Device to the number of configured dies per super block.\nOnce super blocks have been allocated from the Virtual Device, it may not be possible to modify the number of pSLC super blocks and the call will fail with -ENOSPC."),(0,l.kt)("h4",{id:"parameters-of-sefsetnumberofpslcsuperblocks"},"Parameters of SEFSetNumberOfPSLCSuperBlocks"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFVDHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"vdHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the SEF Unit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,l.kt)("td",{parentName:"tr",align:null},"numPSLCSuperBlocks"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"The number of pSLC super blocks to set")))),(0,l.kt)("h4",{id:"return-values-of-sefsetnumberofpslcsuperblocks"},"Return values of SEFSetNumberOfPSLCSuperBlocks"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"The number of pSLC super blocks has been set")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The SEF Handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENOSPC"),(0,l.kt)("td",{parentName:"tr",align:null},"No space is available for pSLC super blocks")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The function parameter is not valid; info returns the parameter index that is not valid.")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFGetVirtualDeviceUsage"},"SEFGetVirtualDeviceUsage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFGetVirtualDeviceUsage(SEFVDHandle vdHandle, struct SEFVirtualDeviceUsage *usage)\n")),(0,l.kt)("p",null,"Returns Virtual Device usage. "),(0,l.kt)("h4",{id:"parameters-of-sefgetvirtualdeviceusage"},"Parameters of SEFGetVirtualDeviceUsage"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFVDHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"vdHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the Virtual Device")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFVirtualDeviceUsage"},"struct SEFVirtualDeviceUsage*")),(0,l.kt)("td",{parentName:"tr",align:null},"usage"),(0,l.kt)("td",{parentName:"tr",align:null},"Out"),(0,l.kt)("td",{parentName:"tr",align:null},"Buffer for storing VD usage")))),(0,l.kt)("h4",{id:"return-value-of-sefgetvirtualdeviceusage"},"Return value of SEFGetVirtualDeviceUsage"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefgetvirtualdeviceusage"},"Return values of SEFGetVirtualDeviceUsage"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The Virtual Device Handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EPERM"),(0,l.kt)("td",{parentName:"tr",align:null},"The Virtual Device Handle is not open")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFGetDieList"},"SEFGetDieList"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFGetDieList(SEFHandle sefHandle, struct SEFVirtualDeviceID virtualDeviceID, struct SEFDieList *list, int bufferSize)\n")),(0,l.kt)("p",null,"Returns Virtual Device die list.\nWhen list is NULL or insufficiently sized or bufferSize is 0, status.info returns the minimum buffer size for the complete list. The data that fits in an insufficiently sized buffer is valid but incomplete. The buffer must be at least the size of the list structure."),(0,l.kt)("h4",{id:"parameters-of-sefgetdielist"},"Parameters of SEFGetDieList"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"sefHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the SEF Unit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFVirtualDeviceID"},"struct SEFVirtualDeviceID")),(0,l.kt)("td",{parentName:"tr",align:null},"virtualDeviceID"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Virtual Device ID")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFDieList"},"struct SEFDieList*")),(0,l.kt)("td",{parentName:"tr",align:null},"list"),(0,l.kt)("td",{parentName:"tr",align:null},"Out"),(0,l.kt)("td",{parentName:"tr",align:null},"Buffer for storing VD information")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"bufferSize"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Buffer size")))),(0,l.kt)("h4",{id:"return-value-of-sefgetdielist"},"Return value of SEFGetDieList"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefgetdielist"},"Return values of SEFGetDieList"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The SEF Handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The function parameter is not valid; info returns the parameter index that is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"info field returns the minimum buffer size if the buffer is insufficient or NULL; otherwise, 0")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFGetVirtualDeviceInformation"},"SEFGetVirtualDeviceInformation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFGetVirtualDeviceInformation(SEFHandle sefHandle, struct SEFVirtualDeviceID virtualDeviceID, struct SEFVirtualDeviceInfo *info, int bufferSize)\n")),(0,l.kt)("p",null,"Returns Virtual Device information.\nWhen info is NULL or insufficiently sized or bufferSize is 0, status.info returns the minimum buffer size for the complete set of information. The data that fits in an insufficiently sized buffer is valid but incomplete. The buffer must be at least the size of the info structure."),(0,l.kt)("h4",{id:"parameters-of-sefgetvirtualdeviceinformation"},"Parameters of SEFGetVirtualDeviceInformation"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"sefHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the SEF Unit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFVirtualDeviceID"},"struct SEFVirtualDeviceID")),(0,l.kt)("td",{parentName:"tr",align:null},"virtualDeviceID"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Virtual Device ID")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFVirtualDeviceInfo"},"struct SEFVirtualDeviceInfo*")),(0,l.kt)("td",{parentName:"tr",align:null},"info"),(0,l.kt)("td",{parentName:"tr",align:null},"Out"),(0,l.kt)("td",{parentName:"tr",align:null},"Buffer for storing VD information")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"bufferSize"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Buffer size")))),(0,l.kt)("h4",{id:"return-value-of-sefgetvirtualdeviceinformation"},"Return value of SEFGetVirtualDeviceInformation"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefgetvirtualdeviceinformation"},"Return values of SEFGetVirtualDeviceInformation"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The SEF Handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The function parameter is not valid; info returns the parameter index that is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"info field returns the minimum buffer size if the buffer is insufficient or NULL; otherwise, 0")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFSetVirtualDeviceSuspendConfig"},"SEFSetVirtualDeviceSuspendConfig"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFSetVirtualDeviceSuspendConfig(SEFVDHandle vdHandle, const struct SEFVirtualDeviceSuspendConfig *config)\n")),(0,l.kt)("p",null,"Sets the suspend configuration for a Virtual Device. "),(0,l.kt)("h4",{id:"parameters-of-sefsetvirtualdevicesuspendconfig"},"Parameters of SEFSetVirtualDeviceSuspendConfig"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFVDHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"vdHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the SEF Unit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFVirtualDeviceSuspendConfig"},"const struct SEFVirtualDeviceSuspendConfig*")),(0,l.kt)("td",{parentName:"tr",align:null},"config"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Suspend configuration to set")))),(0,l.kt)("h4",{id:"return-values-of-sefsetvirtualdevicesuspendconfig"},"Return values of SEFSetVirtualDeviceSuspendConfig"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"The suspend configuration has been set")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The SEF Handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The function parameter is not valid; info returns the parameter index that is not valid.")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFCreateQoSDomain"},"SEFCreateQoSDomain"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFCreateQoSDomain(SEFVDHandle vdHandle, struct SEFQoSDomainID QoSDomainID, uint64_t flashCapacity, uint64_t pSLCFlashCapacity, int ADUindex, enum SEFAPIIdentifier api, enum SEFDefectManagementMethod defectStrategy, enum SEFErrorRecoveryMode recovery, const char *encryptionKey, uint16_t numPlacementIDs, uint16_t maxOpenSuperBlocks, uint8_t defaultReadQueue, struct SEFWeights weights)\n")),(0,l.kt)("p",null,"Attempts to create a QoS Domain in the specified Virtual Device.\nReturns an error when the target Virtual Device doesn\u2019t have enough flash memory space. The actual flash capacity reserved in the Virtual Device is typically larger than what was requested by flashCapacity."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"See Also:")," ",(0,l.kt)("a",{parentName:"p",href:"/SEF_API/sef-api00#function-SEFGetInformation"},"SEFGetInformation()")," "),(0,l.kt)("h4",{id:"parameters-of-sefcreateqosdomain"},"Parameters of SEFCreateQoSDomain"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFVDHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"vdHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the Virtual Device")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFQoSDomainID"},"struct SEFQoSDomainID")),(0,l.kt)("td",{parentName:"tr",align:null},"QoSDomainID"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"QoS Domain ID. Unique across all QoS Domains")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uint64","_","t"),(0,l.kt)("td",{parentName:"tr",align:null},"flashCapacity"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Number of required/reserved ADUs")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uint64","_","t"),(0,l.kt)("td",{parentName:"tr",align:null},"pSLCFlashCapacity"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Number of required/reserved pSLC adus")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"ADUindex"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Index into the ADUSize[] array in SEFInfo returned by SEFGetInformation() to select the data and metadata sizes of an ADU.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api05#enum-SEFAPIIdentifier"},"enum SEFAPIIdentifier")),(0,l.kt)("td",{parentName:"tr",align:null},"api"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Specifies the API Identifier for this QoS Domain")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api05#enum-SEFDefectManagementMethod"},"enum SEFDefectManagementMethod")),(0,l.kt)("td",{parentName:"tr",align:null},"defectStrategy"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Specifies the defect management strategy for the QoS Domain")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api05#enum-SEFErrorRecoveryMode"},"enum SEFErrorRecoveryMode")),(0,l.kt)("td",{parentName:"tr",align:null},"recovery"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Specifies the recovery mode for this QoS Domain")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"const char *"),(0,l.kt)("td",{parentName:"tr",align:null},"encryptionKey"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"NULL for disabled.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,l.kt)("td",{parentName:"tr",align:null},"numPlacementIDs"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum number of Placement IDs that can be placed on the QoS Domain.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,l.kt)("td",{parentName:"tr",align:null},"maxOpenSuperBlocks"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"The maximum number super blocks that can be open in a QoS Domain. If less than numPlacementIDs it will be set to numPlacementIDs+2. This affects resource/memory usage in the device.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uint8","_","t"),(0,l.kt)("td",{parentName:"tr",align:null},"defaultReadQueue"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"The default read queue assignment, 0 through numReadQueues-1 defined for the Virtual Device.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFWeights"},"struct SEFWeights")),(0,l.kt)("td",{parentName:"tr",align:null},"weights"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Weight values for each type of write I/O operations.")))),(0,l.kt)("h4",{id:"return-value-of-sefcreateqosdomain"},"Return value of SEFCreateQoSDomain"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefcreateqosdomain"},"Return values of SEFCreateQoSDomain"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The Virtual Device Handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EPERM"),(0,l.kt)("td",{parentName:"tr",align:null},"The Virtual Device Handle is not open")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The function parameter is not valid; info returns the parameter index that is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENOMEM"),(0,l.kt)("td",{parentName:"tr",align:null},"The library was unable to allocate needed structures. status.info is set to the type of capacity that caused the failure (kForWrite or kForPSLCWrite)")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFSetQoSDomainCapacity"},"SEFSetQoSDomainCapacity"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFSetQoSDomainCapacity(SEFVDHandle vdHandle, struct SEFQoSDomainID QoSDomainID, enum SEFSuperBlockType type, uint64_t flashCapacity, uint64_t flashQuota)\n")),(0,l.kt)("p",null,"Resets the capacity of a QoS Domain.\nSets a new capacity and quota for the QoS Domain. When the flashQuota is less the flashCapacity or the used flashedCapacity, it will be set to the larger of the two."),(0,l.kt)("h4",{id:"parameters-of-sefsetqosdomaincapacity"},"Parameters of SEFSetQoSDomainCapacity"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFVDHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"vdHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the Virtual Device")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFQoSDomainID"},"struct SEFQoSDomainID")),(0,l.kt)("td",{parentName:"tr",align:null},"QoSDomainID"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"QoS Domain ID")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api05#enum-SEFSuperBlockType"},"enum SEFSuperBlockType")),(0,l.kt)("td",{parentName:"tr",align:null},"type"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Type of super block")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uint64","_","t"),(0,l.kt)("td",{parentName:"tr",align:null},"flashCapacity"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Number of required/reserved ADUs for the specified type of super block")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uint64","_","t"),(0,l.kt)("td",{parentName:"tr",align:null},"flashQuota"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Number of ADUs that can be allocated for the specified type of super block")))),(0,l.kt)("h4",{id:"return-value-of-sefsetqosdomaincapacity"},"Return value of SEFSetQoSDomainCapacity"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefsetqosdomaincapacity"},"Return values of SEFSetQoSDomainCapacity"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The Virtual Device Handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EPERM"),(0,l.kt)("td",{parentName:"tr",align:null},"The Virtual Device Handle is not open")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The function parameter is not valid; info returns the parameter index that is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENOSPC"),(0,l.kt)("td",{parentName:"tr",align:null},"The Virtual Device does not have enough space")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFSetRootPointer"},"SEFSetRootPointer"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFSetRootPointer(SEFQoSHandle qosHandle, int index, struct SEFFlashAddress value)\n")),(0,l.kt)("p",null,"Sets the value of a QoSDomain root pointer.\nA root pointer may be set to any value. Root pointer values are read back using SEFGetQoSDomainInformation(). When a root pointer is set to a flash address that is valid for the QoS Domain it's stored in, the ADU it points to can be read by SEFReadWithPhysicalAddress() using a flash address of just the root pointer index as the ADU oftset with zeros for the QoS DomainId and super block index."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"See Also:")," ",(0,l.kt)("a",{parentName:"p",href:"/SEF_API/sef-api01#function-SEFReadWithPhysicalAddress"},"SEFReadWithPhysicalAddress()")," "),(0,l.kt)("h4",{id:"parameters-of-sefsetrootpointer"},"Parameters of SEFSetRootPointer"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFQoSHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"qosHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the QoS Domain")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"index"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"The index of the root pointer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFFlashAddress"},"struct SEFFlashAddress")),(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Value of the pointer")))),(0,l.kt)("h4",{id:"return-value-of-sefsetrootpointer"},"Return value of SEFSetRootPointer"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefsetrootpointer"},"Return values of SEFSetRootPointer"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EPERM"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain Handle is not open")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The function parameter is not valid; info returns the parameter index that is not valid")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFSetReadDeadline"},"SEFSetReadDeadline"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFSetReadDeadline(SEFQoSHandle qosHandle, enum SEFDeadlineType deadline)\n")),(0,l.kt)("p",null,"Sets target QoS Domain's read deadline policy. "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"See Also:")," ",(0,l.kt)("a",{parentName:"p",href:"/SEF_API/sef-api02#struct-SEFVirtualDeviceInfo"},"struct SEFVirtualDeviceInfo")," "),(0,l.kt)("h4",{id:"parameters-of-sefsetreaddeadline"},"Parameters of SEFSetReadDeadline"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFQoSHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"qosHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the QoS Domain")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api05#enum-SEFDeadlineType"},"enum SEFDeadlineType")),(0,l.kt)("td",{parentName:"tr",align:null},"deadline"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Deadline type for this QoS Domain")))),(0,l.kt)("h4",{id:"return-value-of-sefsetreaddeadline"},"Return value of SEFSetReadDeadline"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefsetreaddeadline"},"Return values of SEFSetReadDeadline"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EPERM"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain Handle is not open")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFGetSuperBlockList"},"SEFGetSuperBlockList"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFGetSuperBlockList(SEFQoSHandle qosHandle, struct SEFSuperBlockList *list, int bufferSize)\n")),(0,l.kt)("p",null,"Returns a list of super blocks assigned to the QoS Domain.\nWhen list is NULL or insufficiently sized or bufferSize is 0, status.info returns the minimum buffer size for the complete list. The data that fits in an insufficiently sized buffer is valid but incomplete. The buffer must be at least the size of the list structure."),(0,l.kt)("h4",{id:"parameters-of-sefgetsuperblocklist"},"Parameters of SEFGetSuperBlockList"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFQoSHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"qosHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the QoS Domain")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFSuperBlockList"},"struct SEFSuperBlockList*")),(0,l.kt)("td",{parentName:"tr",align:null},"list"),(0,l.kt)("td",{parentName:"tr",align:null},"Out"),(0,l.kt)("td",{parentName:"tr",align:null},"List of super block records")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"bufferSize"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Buffer size")))),(0,l.kt)("h4",{id:"return-value-of-sefgetsuperblocklist"},"Return value of SEFGetSuperBlockList"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefgetsuperblocklist"},"Return values of SEFGetSuperBlockList"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EPERM"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain Handle is not open")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The function parameter is not valid; info returns the parameter index that is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"info field returns the minimum buffer size if the buffer is insufficient or NULL; otherwise, 0")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFGetQoSDomainInformation"},"SEFGetQoSDomainInformation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFGetQoSDomainInformation(SEFHandle sefHandle, struct SEFQoSDomainID QoSDomainID, struct SEFQoSDomainInfo *info)\n")),(0,l.kt)("p",null,"Returns QoS Domain information, including the list of super blocks assigned to the QoS Domain. "),(0,l.kt)("h4",{id:"parameters-of-sefgetqosdomaininformation"},"Parameters of SEFGetQoSDomainInformation"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"sefHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the SEF Unit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFQoSDomainID"},"struct SEFQoSDomainID")),(0,l.kt)("td",{parentName:"tr",align:null},"QoSDomainID"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"QoS Domain ID")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFQoSDomainInfo"},"struct SEFQoSDomainInfo*")),(0,l.kt)("td",{parentName:"tr",align:null},"info"),(0,l.kt)("td",{parentName:"tr",align:null},"Out"),(0,l.kt)("td",{parentName:"tr",align:null},"Buffer for storing QoS Domain information")))),(0,l.kt)("h4",{id:"return-value-of-sefgetqosdomaininformation"},"Return value of SEFGetQoSDomainInformation"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefgetqosdomaininformation"},"Return values of SEFGetQoSDomainInformation"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The SEF handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The function parameter is not valid; info returns the parameter index that is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"SEFQoSDomainInfo was successfully returned.")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFGetReuseList"},"SEFGetReuseList"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFGetReuseList(SEFQoSHandle qosHandle, struct SEFWearInfo *info, int bufferSize)\n")),(0,l.kt)("p",null,"Returns list of super blocks to process for wear-leveling.\nUsed in support of the implementation of a host-specified wear leveling policy. The SEF Unit has a built in wear-leveling mechanism. It returns closed blocks in the order they should be released if subject to the host-specified wear leveling policy.\nWhen info is NULL or insufficiently sized or bufferSize is 0, status.info returns the minimum buffer size for the complete set of information. The data that fits in an insufficiently sized buffer is valid but incomplete. The buffer must be at least the size of the info structure."),(0,l.kt)("h4",{id:"parameters-of-sefgetreuselist"},"Parameters of SEFGetReuseList"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFQoSHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"qosHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the QoS Domain")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFWearInfo"},"struct SEFWearInfo*")),(0,l.kt)("td",{parentName:"tr",align:null},"info"),(0,l.kt)("td",{parentName:"tr",align:null},"Out"),(0,l.kt)("td",{parentName:"tr",align:null},"Buffer for storing information of blocks to process")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"bufferSize"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Buffer size")))),(0,l.kt)("h4",{id:"return-value-of-sefgetreuselist"},"Return value of SEFGetReuseList"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefgetreuselist"},"Return values of SEFGetReuseList"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EPERM"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain Handle is not open")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The function parameter is not valid; info returns the parameter index that is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"info field returns the minimum buffer size if the buffer is insufficient or NULL; otherwise, 0")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFGetRefreshList"},"SEFGetRefreshList"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFGetRefreshList(SEFQoSHandle qosHandle, struct SEFRefreshInfo *info, int bufferSize)\n")),(0,l.kt)("p",null,"Returns a list of blocks that have encountered ECC corrections.\nThese blocks subsequently need to be re-written, or else data loss may occur. This call should be part of a periodic background check to guard against data loss.\nWhen info is NULL or insufficiently sized or bufferSize is 0, status.info returns the minimum buffer size for the complete set of information. The data that fits in an insufficiently sized buffer is valid but incomplete. The buffer must be at least the size of the info structure."),(0,l.kt)("h4",{id:"parameters-of-sefgetrefreshlist"},"Parameters of SEFGetRefreshList"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFQoSHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"qosHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the QoS Domain")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFRefreshInfo"},"struct SEFRefreshInfo*")),(0,l.kt)("td",{parentName:"tr",align:null},"info"),(0,l.kt)("td",{parentName:"tr",align:null},"Out"),(0,l.kt)("td",{parentName:"tr",align:null},"Buffer for storing information of blocks to process")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"bufferSize"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Buffer size")))),(0,l.kt)("h4",{id:"return-value-of-sefgetrefreshlist"},"Return value of SEFGetRefreshList"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefgetrefreshlist"},"Return values of SEFGetRefreshList"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EPERM"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain Handle is not open")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The function parameter is not valid; info returns the parameter index that is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"info field returns the minimum buffer size if the buffer is insufficient or NULL; otherwise, 0")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFGetCheckList"},"SEFGetCheckList"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFGetCheckList(SEFQoSHandle qosHandle, struct SEFCheckInfo *info, int bufferSize)\n")),(0,l.kt)("p",null,"Returns a list of blocks that have encountered conditions that need to be checked.\nIn the event that this command indicates that blocks need to be checked, a subsequent patrol command (SEFCheckSuperBlock) should be issued in response. Detailed error statistics will be returned as part of the patrol, and appropriate corrective actions can be based on the returned information.\nWhen info is NULL or insufficiently sized or bufferSize is 0, status.info returns the minimum buffer size for the complete set of information. The data that fits in an insufficiently sized buffer is valid but incomplete. The buffer must be at least the size of the info structure."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"See Also:")," ",(0,l.kt)("a",{parentName:"p",href:"/SEF_API/sef-api00#function-SEFCheckSuperBlock"},"SEFCheckSuperBlock()")," "),(0,l.kt)("h4",{id:"parameters-of-sefgetchecklist"},"Parameters of SEFGetCheckList"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFQoSHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"qosHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the QoS Domain")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFCheckInfo"},"struct SEFCheckInfo*")),(0,l.kt)("td",{parentName:"tr",align:null},"info"),(0,l.kt)("td",{parentName:"tr",align:null},"Out"),(0,l.kt)("td",{parentName:"tr",align:null},"Buffer for storing information of blocks to process")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"bufferSize"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Buffer size")))),(0,l.kt)("h4",{id:"return-value-of-sefgetchecklist"},"Return value of SEFGetCheckList"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefgetchecklist"},"Return values of SEFGetCheckList"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EPERM"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain Handle is not open")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The function parameter is not valid; info returns the parameter index that is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"info field returns the minimum buffer size if the buffer is insufficient or NULL; otherwise, 0")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFGetUserAddressList"},"SEFGetUserAddressList"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFGetUserAddressList(SEFQoSHandle qosHandle, struct SEFFlashAddress flashAddress, struct SEFUserAddressList *list, int bufferSize)\n")),(0,l.kt)("p",null,"Returns the user address list in terms of its underlying super blocks.\nUsed as part of an FTL reconstruction activity. This can happen in the event of, for example, ungraceful shutdown. This mechanism can also be used to build custom diagnostic tools. This command is not needed during normal operation.\nADUs that have not been written return a user address equal to SEFUserAddressIgnore.\nWhen list is NULL or insufficiently sized or bufferSize is 0, status.info returns the minimum buffer size for the complete list. The data that fits in an insufficiently sized buffer is valid but incomplete. The buffer must be at least the size of the list structure."),(0,l.kt)("h4",{id:"parameters-of-sefgetuseraddresslist"},"Parameters of SEFGetUserAddressList"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFQoSHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"qosHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the QoS Domain")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFFlashAddress"},"struct SEFFlashAddress")),(0,l.kt)("td",{parentName:"tr",align:null},"flashAddress"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Flash address of the super block")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFUserAddressList"},"struct SEFUserAddressList*")),(0,l.kt)("td",{parentName:"tr",align:null},"list"),(0,l.kt)("td",{parentName:"tr",align:null},"Out"),(0,l.kt)("td",{parentName:"tr",align:null},"Buffer for storing list of user addresses")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"bufferSize"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Buffer size")))),(0,l.kt)("h4",{id:"return-value-of-sefgetuseraddresslist"},"Return value of SEFGetUserAddressList"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefgetuseraddresslist"},"Return values of SEFGetUserAddressList"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EPERM"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain Handle is not open")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The function parameter is not valid; info returns the parameter index that is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"info field returns the minimum buffer size if the buffer is insufficient or NULL; otherwise, 0")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFGetSuperBlockInfo"},"SEFGetSuperBlockInfo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFGetSuperBlockInfo(SEFQoSHandle qosHandle, struct SEFFlashAddress flashAddress, int getDefectMap, struct SEFSuperBlockInfo *info)\n")),(0,l.kt)("p",null,"Returns information corresponding to the super block. "),(0,l.kt)("h4",{id:"parameters-of-sefgetsuperblockinfo"},"Parameters of SEFGetSuperBlockInfo"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFQoSHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"qosHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the QoS Domain")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFFlashAddress"},"struct SEFFlashAddress")),(0,l.kt)("td",{parentName:"tr",align:null},"flashAddress"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Flash address of the super block")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"getDefectMap"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"When non-zero populates the defectBitmap member of SEFSuperBlockInfo. See SEFSuperBlockInfo for information on the size of defectBitmap")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFSuperBlockInfo"},"struct SEFSuperBlockInfo*")),(0,l.kt)("td",{parentName:"tr",align:null},"info"),(0,l.kt)("td",{parentName:"tr",align:null},"Out"),(0,l.kt)("td",{parentName:"tr",align:null},"Buffer for storing super block information")))),(0,l.kt)("h4",{id:"return-value-of-sefgetsuperblockinfo"},"Return value of SEFGetSuperBlockInfo"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefgetsuperblockinfo"},"Return values of SEFGetSuperBlockInfo"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EPERM"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain Handle is not open")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The function parameter is not valid; info returns the parameter index that is not valid")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFCheckSuperBlock"},"SEFCheckSuperBlock"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFCheckSuperBlock(SEFQoSHandle qosHandle, struct SEFFlashAddress flashAddress)\n")),(0,l.kt)("p",null,"This is a read patrol operation which is used in conjunction with SEFGetCheckList and the kRequirePatrol QoS Notification.\nPatrol reads don't use the scheduling queues and are issued as soon as possible. Any actions required by the result of the patrol will generate the appropriate QoS Notification."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"See Also:")," ",(0,l.kt)("a",{parentName:"p",href:"/SEF_API/sef-api00#function-SEFGetCheckList"},"SEFGetCheckList()")," "),(0,l.kt)("h4",{id:"parameters-of-sefchecksuperblock"},"Parameters of SEFCheckSuperBlock"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFQoSHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"qosHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the QoS Domain")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFFlashAddress"},"struct SEFFlashAddress")),(0,l.kt)("td",{parentName:"tr",align:null},"flashAddress"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Flash address of the super block to be checked")))),(0,l.kt)("h4",{id:"return-value-of-sefchecksuperblock"},"Return value of SEFCheckSuperBlock"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefchecksuperblock"},"Return values of SEFCheckSuperBlock"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"The super block is checked")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EPERM"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain Handle is not open")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The function parameter is not valid; info returns the parameter index that is not valid")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFDeleteVirtualDevices"},"SEFDeleteVirtualDevices"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFDeleteVirtualDevices(SEFHandle sefHandle)\n")),(0,l.kt)("p",null,"Deletes the Virtual Devices and allocated physical resources.\nDeleting virtual devices for a SEF Unit can only be done during pre-production. Once the flash of a SEF Unit has been written to, it is not possible to delete the Virtual Device configuration."),(0,l.kt)("h4",{id:"parameters-of-sefdeletevirtualdevices"},"Parameters of SEFDeleteVirtualDevices"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"sefHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the SEF Unit")))),(0,l.kt)("h4",{id:"return-value-of-sefdeletevirtualdevices"},"Return value of SEFDeleteVirtualDevices"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result. Returns 0 on success and negative value on error.")))),(0,l.kt)("h4",{id:"return-values-of-sefdeletevirtualdevices"},"Return values of SEFDeleteVirtualDevices"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The SEF Handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The function parameter is not valid; info returns the parameter index that is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EACCES"),(0,l.kt)("td",{parentName:"tr",align:null},"You don't have the needed permission to perform this operation")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENOTEMPTY"),(0,l.kt)("td",{parentName:"tr",align:null},"At least one QoS Domain exists")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EBUSY"),(0,l.kt)("td",{parentName:"tr",align:null},"The Virtual Device is in use and not all the handles are closed")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFDeleteQoSDomain"},"SEFDeleteQoSDomain"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFDeleteQoSDomain(SEFHandle sefHandle, struct SEFQoSDomainID QoSDomainID)\n")),(0,l.kt)("p",null,"Deletes the target QoS Domain.\nThe QoS Domain must be in the closed state before issuing this command. After closing the target QoS Domain, its assigned super blocks are returned to the Virtual Device's free pool."),(0,l.kt)("h4",{id:"parameters-of-sefdeleteqosdomain"},"Parameters of SEFDeleteQoSDomain"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"sefHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the SEF Unit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFQoSDomainID"},"struct SEFQoSDomainID")),(0,l.kt)("td",{parentName:"tr",align:null},"QoSDomainID"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"QoS Domain ID")))),(0,l.kt)("h4",{id:"return-value-of-sefdeleteqosdomain"},"Return value of SEFDeleteQoSDomain"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefdeleteqosdomain"},"Return values of SEFDeleteQoSDomain"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The SEF handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain ID is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EACCES"),(0,l.kt)("td",{parentName:"tr",align:null},"You don't have the needed permission to perform this operation")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EBUSY"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain is in use and not all the handles are closed")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFResetEncryptionKey"},"SEFResetEncryptionKey"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFResetEncryptionKey(SEFVDHandle vdHandle, struct SEFQoSDomainID QoSDomainID)\n")),(0,l.kt)("p",null,"Resets the encryption key for a QoS Domain. "),(0,l.kt)("h4",{id:"parameters-of-sefresetencryptionkey"},"Parameters of SEFResetEncryptionKey"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFVDHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"vdHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the Virtual Drive")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFQoSDomainID"},"struct SEFQoSDomainID")),(0,l.kt)("td",{parentName:"tr",align:null},"QoSDomainID"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"QoS Domain ID")))),(0,l.kt)("h4",{id:"return-value-of-sefresetencryptionkey"},"Return value of SEFResetEncryptionKey"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefresetencryptionkey"},"Return values of SEFResetEncryptionKey"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The Virtual Device handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EPERM"),(0,l.kt)("td",{parentName:"tr",align:null},"The Virtual Device handle is not open")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain Id is not valid")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFOpenVirtualDevice"},"SEFOpenVirtualDevice"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFOpenVirtualDevice(SEFHandle sefHandle, struct SEFVirtualDeviceID virtualDeviceID, void(*notifyFunc)(void *, struct SEFVDNotification), void *context, SEFVDHandle *vdHandle)\n")),(0,l.kt)("p",null,"Opens the target Virtual Device.\nSince Virtual Devices are persistent, this provides the mechanism for opening a preexisting Virtual Device to resume I/O after reboot. This function needs to be called in order to receive notifications about the Virtual Device, such as in the event that a reduced capacity notification is issued."),(0,l.kt)("h4",{id:"parameters-of-sefopenvirtualdevice"},"Parameters of SEFOpenVirtualDevice"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"sefHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the SEF Unit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFVirtualDeviceID"},"struct SEFVirtualDeviceID")),(0,l.kt)("td",{parentName:"tr",align:null},"virtualDeviceID"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Virtual Device ID")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"void(",(0,l.kt)("em",{parentName:"td"},")(void "),", struct SEFVDNotification)"),(0,l.kt)("td",{parentName:"tr",align:null},"notifyFunc"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Callback to be executed upon event generation")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"void *"),(0,l.kt)("td",{parentName:"tr",align:null},"context"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"A void* pointer passed to the async event notification function (used to pass user context information)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFVDHandle *"),(0,l.kt)("td",{parentName:"tr",align:null},"vdHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the Virtual Drive")))),(0,l.kt)("h4",{id:"return-value-of-sefopenvirtualdevice"},"Return value of SEFOpenVirtualDevice"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefopenvirtualdevice"},"Return values of SEFOpenVirtualDevice"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The SEF handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The function parameter is not valid; info returns the parameter index that is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EACCES"),(0,l.kt)("td",{parentName:"tr",align:null},"You don't have the needed permission to perform this operation")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENOMEM"),(0,l.kt)("td",{parentName:"tr",align:null},"The library was unable to allocate needed structures")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EALREADY"),(0,l.kt)("td",{parentName:"tr",align:null},"The Virtual Device is already open")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFCloseVirtualDevice"},"SEFCloseVirtualDevice"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFCloseVirtualDevice(SEFVDHandle vdHandle)\n")),(0,l.kt)("p",null,"Closes an open Virtual Device and shuts down associated event notification. "),(0,l.kt)("h4",{id:"parameters-of-sefclosevirtualdevice"},"Parameters of SEFCloseVirtualDevice"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFVDHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"vdHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the Virtual Device")))),(0,l.kt)("h4",{id:"return-value-of-sefclosevirtualdevice"},"Return value of SEFCloseVirtualDevice"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefclosevirtualdevice"},"Return values of SEFCloseVirtualDevice"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The Virtual Device handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EPERM"),(0,l.kt)("td",{parentName:"tr",align:null},"The Virtual Device Handle is not open")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EWOULDBLOCK"),(0,l.kt)("td",{parentName:"tr",align:null},"This function cannot be called on a callback thread")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFOpenQoSDomain"},"SEFOpenQoSDomain"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFOpenQoSDomain(SEFHandle sefHandle, struct SEFQoSDomainID QoSDomainID, void(*notifyFunc)(void *, struct SEFQoSNotification), void *context, const void *encryptionKey, SEFQoSHandle *qosHandle)\n")),(0,l.kt)("p",null,"Opens a previously created QoS Domain.\nSince QoS Domains are persistent, this provides the mechanism for opening a preexisting QoS Domain to resume I/O after reboot. This function also provides a channel to receive notifications regarding this QoS Domain."),(0,l.kt)("h4",{id:"parameters-of-sefopenqosdomain"},"Parameters of SEFOpenQoSDomain"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"sefHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the SEF Unit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFQoSDomainID"},"struct SEFQoSDomainID")),(0,l.kt)("td",{parentName:"tr",align:null},"QoSDomainID"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"QoS Domain ID")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"void(",(0,l.kt)("em",{parentName:"td"},")(void "),", struct SEFQoSNotification)"),(0,l.kt)("td",{parentName:"tr",align:null},"notifyFunc"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Callback to be executed during event generation")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"void *"),(0,l.kt)("td",{parentName:"tr",align:null},"context"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"A void* pointer passed to the async event notification function (used to pass user context information)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"const void *"),(0,l.kt)("td",{parentName:"tr",align:null},"encryptionKey"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"In a multitenant environment, different tenants will write to separate QoS domains. Provides for individualized encryption keys on a per-domain basis")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFQoSHandle *"),(0,l.kt)("td",{parentName:"tr",align:null},"qosHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"Out"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the QoS Domain")))),(0,l.kt)("h4",{id:"return-value-of-sefopenqosdomain"},"Return value of SEFOpenQoSDomain"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefopenqosdomain"},"Return values of SEFOpenQoSDomain"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The SEF handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The function parameter is not valid; info returns the parameter index that is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EACCES"),(0,l.kt)("td",{parentName:"tr",align:null},"You don't have the needed permission to perform this operation")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENOMEM"),(0,l.kt)("td",{parentName:"tr",align:null},"The library was unable to allocate needed structures")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EALREADY"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain is already open")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFCloseQoSDomain"},"SEFCloseQoSDomain"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFCloseQoSDomain(SEFQoSHandle qosHandle)\n")),(0,l.kt)("p",null,"Closes an open QoS Domain.\nThis will close any open super blocks associated with this domain. All outstanding kSuperBlockChangeState events will be delivered before this function returns. A QoS Domain must be in the closed state to be deleted."),(0,l.kt)("h4",{id:"parameters-of-sefcloseqosdomain"},"Parameters of SEFCloseQoSDomain"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFQoSHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"qosHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the QoS Domain")))),(0,l.kt)("h4",{id:"return-value-of-sefcloseqosdomain"},"Return value of SEFCloseQoSDomain"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefcloseqosdomain"},"Return values of SEFCloseQoSDomain"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EPERM"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain Handle is not open")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EWOULDBLOCK"),(0,l.kt)("td",{parentName:"tr",align:null},"This function cannot be called on a callback thread")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFGetQoSHandleProperty"},"SEFGetQoSHandleProperty"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFProperty SEFGetQoSHandleProperty(SEFQoSHandle qos, enum SEFPropertyID propID)\n")),(0,l.kt)("p",null,"This function gets a property given a SEFQoSHandle. "),(0,l.kt)("h4",{id:"parameters-of-sefgetqoshandleproperty"},"Parameters of SEFGetQoSHandleProperty"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFQoSHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"qosHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the QoS Domain")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api05#enum-SEFPropertyID"},"enum SEFPropertyID")),(0,l.kt)("td",{parentName:"tr",align:null},"propID"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"The Property ID requested")))),(0,l.kt)("h4",{id:"return-value-of-sefgetqoshandleproperty"},"Return value of SEFGetQoSHandleProperty"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFProperty"),(0,l.kt)("td",{parentName:"tr",align:null},"Returns the property stored given the property ID; If an unknown property ID is passed in, the returned type of the property will be kSefPropertyTypeNull. If kSefPropertyPrivateData is not set, the returned type of the property will be kSefPropertyTypeNull.")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFSetQoSHandleProperty"},"SEFSetQoSHandleProperty"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFSetQoSHandleProperty(SEFQoSHandle qos, enum SEFPropertyID propID, struct SEFProperty value)\n")),(0,l.kt)("p",null,"This function sets a property given a SEFQoSHandle.\nThe only settable property is kSefPropertyPrivateData."),(0,l.kt)("h4",{id:"parameters-of-sefsetqoshandleproperty"},"Parameters of SEFSetQoSHandleProperty"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFQoSHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"qosHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the QoS Domain")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api05#enum-SEFPropertyID"},"enum SEFPropertyID")),(0,l.kt)("td",{parentName:"tr",align:null},"propID"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"The Property ID being stored")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFProperty"},"struct SEFProperty")),(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"The value of the property being stored")))),(0,l.kt)("h4",{id:"return-value-of-sefsetqoshandleproperty"},"Return value of SEFSetQoSHandleProperty"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefsetqoshandleproperty"},"Return values of SEFSetQoSHandleProperty"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EPERM"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain Handle is not open")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The function parameter is not valid; info returns the parameter index that is not valid")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFParseFlashAddress"},"SEFParseFlashAddress"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFParseFlashAddress(SEFQoSHandle qosHandle, struct SEFFlashAddress flashAddress, struct SEFQoSDomainID *QoSDomainID, uint32_t *blockNumber, uint32_t *ADUOffset)\n")),(0,l.kt)("p",null,"This function is used to extract info needed by FTL from an opaque flash address.\nThe QoS Domain ID of the passed in qosHandle does not have to match the QoS Domain ID of the passed in flash address. No validation is performed and the address is parsed as if it came from the QoS Domain of the passed in qosHandle. When they differ, it's up to the client to ensure the two different QoS Domain IDs are compatible. That is, the virtual devices they live in have the same value for superBlockDies."),(0,l.kt)("h4",{id:"parameters-of-sefparseflashaddress"},"Parameters of SEFParseFlashAddress"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFQoSHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"qosHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to a QoS Domain to interpret/parse the flash address. May be NULL if only the QoSDomainID is being returned.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFFlashAddress"},"struct SEFFlashAddress")),(0,l.kt)("td",{parentName:"tr",align:null},"flashAddress"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"The opaque address to be parsed")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFQoSDomainID"},"struct SEFQoSDomainID*")),(0,l.kt)("td",{parentName:"tr",align:null},"QoSDomainID"),(0,l.kt)("td",{parentName:"tr",align:null},"Out"),(0,l.kt)("td",{parentName:"tr",align:null},"A pointer to where to return the QoS Domain ID. A null pointer indicates that the QoS Domain ID is not to be returned")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uint32","_","t *"),(0,l.kt)("td",{parentName:"tr",align:null},"blockNumber"),(0,l.kt)("td",{parentName:"tr",align:null},"Out"),(0,l.kt)("td",{parentName:"tr",align:null},"A pointer to where to return the block number. A null pointer indicates that the block number is not to be returned")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uint32","_","t *"),(0,l.kt)("td",{parentName:"tr",align:null},"ADUOffset"),(0,l.kt)("td",{parentName:"tr",align:null},"Out"),(0,l.kt)("td",{parentName:"tr",align:null},"A pointer to where to return the ADU Offset. A null pointer indicates that the ADU Offset is not to be returned")))),(0,l.kt)("h4",{id:"return-value-of-sefparseflashaddress"},"Return value of SEFParseFlashAddress"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFCreateFlashAddress"},"SEFCreateFlashAddress"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFFlashAddress SEFCreateFlashAddress(SEFQoSHandle qosHandle, struct SEFQoSDomainID QoSDomainID, uint32_t blockNumber, uint32_t ADUOffset)\n")),(0,l.kt)("p",null,"This function is used to create an opaque flash address.\nA generated flash address may be rejected by the device if it specifies an illegal ADUOffset, a super block number not owned by the QoSDomainID, or a QoSDomainID that has not been opened by the caller."),(0,l.kt)("h4",{id:"parameters-of-sefcreateflashaddress"},"Parameters of SEFCreateFlashAddress"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFQoSHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"qosHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle of a QoS Domain to create a flash address for.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFQoSDomainID"},"struct SEFQoSDomainID")),(0,l.kt)("td",{parentName:"tr",align:null},"QoSDomainID"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"The desired QoS Domain ID. It is not validated against the QoS Domain ID of the qosHandle.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,l.kt)("td",{parentName:"tr",align:null},"blockNumber"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"The desired super block number.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,l.kt)("td",{parentName:"tr",align:null},"ADUOffset"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"The desired ADU Offset.")))),(0,l.kt)("h4",{id:"return-value-of-sefcreateflashaddress"},"Return value of SEFCreateFlashAddress"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFFlashAddress"),(0,l.kt)("td",{parentName:"tr",align:null},"The generated flash address or the NULL flashAddress if the qosHandle is invalid.")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFReleaseSuperBlock"},"SEFReleaseSuperBlock"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFReleaseSuperBlock(SEFQoSHandle qosHandle, struct SEFFlashAddress flashAddress)\n")),(0,l.kt)("p",null,"Releases the specific super block to the free pool owned by the Virtual Device to which the specified QoS Domain belongs.\nThe target super block must have been assigned by a previous call to SEFAllocateSuperBlock() or as part of SEFWriteWithoutPhysicalAddress(). The super block may be in an open or closed state."),(0,l.kt)("h4",{id:"parameters-of-sefreleasesuperblock"},"Parameters of SEFReleaseSuperBlock"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFQoSHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"qosHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the QoS Domain of the super block")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFFlashAddress"},"struct SEFFlashAddress")),(0,l.kt)("td",{parentName:"tr",align:null},"flashAddress"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Flash address of the super block to release")))),(0,l.kt)("h4",{id:"return-value-of-sefreleasesuperblock"},"Return value of SEFReleaseSuperBlock"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefreleasesuperblock"},"Return values of SEFReleaseSuperBlock"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EPERM"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain Handle is not open")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EFAULT"),(0,l.kt)("td",{parentName:"tr",align:null},"The Flash Address is not valid")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFAllocateSuperBlock"},"SEFAllocateSuperBlock"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFAllocateSuperBlock(SEFQoSHandle qosHandle, struct SEFFlashAddress *flashAddress, enum SEFSuperBlockType type, const struct SEFAllocateOverrides *overrides)\n")),(0,l.kt)("p",null,"Allocates a super block that will be assigned to the specified QoS Domain and returns the flash address of this super block.\nThe returned super block will be in the open state. These super blocks in turn can be used as part of the parameter set for the SEFNamlessCopy and SEFWriteWithoutPhysicalAddress functions. When allocating a super block, The SEF Unit intelligently selects a location in a manner designed to optimize the lifetime of flash memory and will return the flash address that was selected. Note that each open super block will allocate a write buffer and therefore consume memory, so there is a tradeoff in the number of open super blocks and the amount of memory consumed.\nIt's required that the total ADUs in the QoS Domain be less than its flash quota and its Virtual Device have an available super block. The ADUs in use by a QoS Domain can be known by summing the writableADUs of each super block in the QoS Domain."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"See Also:")," ",(0,l.kt)("a",{parentName:"p",href:"/SEF_API/sef-api00#function-SEFGetQoSDomainInformation"},"SEFGetQoSDomainInformation()")," "),(0,l.kt)("h4",{id:"parameters-of-sefallocatesuperblock"},"Parameters of SEFAllocateSuperBlock"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFQoSHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"qosHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the QoS Domain")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFFlashAddress"},"struct SEFFlashAddress*")),(0,l.kt)("td",{parentName:"tr",align:null},"flashAddress"),(0,l.kt)("td",{parentName:"tr",align:null},"Out"),(0,l.kt)("td",{parentName:"tr",align:null},"The flash address of the allocated block")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api05#enum-SEFSuperBlockType"},"enum SEFSuperBlockType")),(0,l.kt)("td",{parentName:"tr",align:null},"type"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"kForWrite or kForPSLCWrite")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFAllocateOverrides"},"const struct SEFAllocateOverrides*")),(0,l.kt)("td",{parentName:"tr",align:null},"overrides"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Overrides to scheduler parameters; pointer can be null for none required.")))),(0,l.kt)("h4",{id:"return-value-of-sefallocatesuperblock"},"Return value of SEFAllocateSuperBlock"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefallocatesuperblock"},"Return values of SEFAllocateSuperBlock"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"The info member contains number of ADUs in allocated super block")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EPERM"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain Handle is not open")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The function parameter is not valid; info returns the parameter index that is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENOSPC"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain is out of space")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFFlushSuperBlock"},"SEFFlushSuperBlock"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFFlushSuperBlock(SEFQoSHandle qosHandle, struct SEFFlashAddress flashAddress, uint32_t *distanceToEndOfSuperBlock)\n")),(0,l.kt)("p",null,"Flushes the target super block.\nThis command causes all written data for the super block that is still in the write buffer and not persisted to flash memory to be persisted to flash memory. The device will automatically append data if necessary to finish programming of all pending user data writes. This command will not return until all the data is persistent and all kAddressUpdate change notifications generated by the flush have been processed.\nWhen a flush causes a super block to have no more writable ADUs, the super block will be closed and a QoS Domain notification of the close will be sent."),(0,l.kt)("h4",{id:"parameters-of-sefflushsuperblock"},"Parameters of SEFFlushSuperBlock"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFQoSHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"qosHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the QoS Domain of the super block")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFFlashAddress"},"struct SEFFlashAddress")),(0,l.kt)("td",{parentName:"tr",align:null},"flashAddress"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Flash address of the super block to be flushed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uint32","_","t *"),(0,l.kt)("td",{parentName:"tr",align:null},"distanceToEndOfSuperBlock"),(0,l.kt)("td",{parentName:"tr",align:null},"Out"),(0,l.kt)("td",{parentName:"tr",align:null},"Indicates remaining size in ADU after this flush operation. May be NULL.")))),(0,l.kt)("h4",{id:"return-value-of-sefflushsuperblock"},"Return value of SEFFlushSuperBlock"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefflushsuperblock"},"Return values of SEFFlushSuperBlock"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EPERM"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain Handle is not open")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EINVAL"),(0,l.kt)("td",{parentName:"tr",align:null},"The function parameter is not valid; info returns the parameter index that is not valid")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFCloseSuperBlock"},"SEFCloseSuperBlock"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"struct SEFStatus SEFCloseSuperBlock(SEFQoSHandle qosHandle, struct SEFFlashAddress flashAddress)\n")),(0,l.kt)("p",null,"Closes the target super block.\nIf there is remaining unwritten space in the super block, that space will be padded with dummy data. This can be used by the FTL as a means of closing a super block without invoking a Write command.\nThis command will not return until all the data is persistent and all kAddressUpdate change notifications generated by the close have been processed ensuring that all addresses have either transitioned from tentative to permanent or have been updated."),(0,l.kt)("h4",{id:"parameters-of-sefclosesuperblock"},"Parameters of SEFCloseSuperBlock"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFQoSHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"qosHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the QoS Domain of the super block")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api02#struct-SEFFlashAddress"},"struct SEFFlashAddress")),(0,l.kt)("td",{parentName:"tr",align:null},"flashAddress"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Flash address of the super block to move to Closed state by filling data")))),(0,l.kt)("h4",{id:"return-value-of-sefclosesuperblock"},"Return value of SEFCloseSuperBlock"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct SEFStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"Status and info summarizing result.")))),(0,l.kt)("h4",{id:"return-values-of-sefclosesuperblock"},"Return values of SEFCloseSuperBlock"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Error Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"The super block is was closed or was already closed")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-ENODEV"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain handle is not valid")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EPERM"),(0,l.kt)("td",{parentName:"tr",align:null},"The QoS Domain Handle is not open")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-EFAULT"),(0,l.kt)("td",{parentName:"tr",align:null},"The Flash Address is not valid")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFReleaseSuperBlockAsync"},"SEFReleaseSuperBlockAsync"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"void SEFReleaseSuperBlockAsync(SEFQoSHandle qosHandle, struct SEFReleaseSuperBlockIOCB *iocb)\n")),(0,l.kt)("p",null,"This function is the asynchronous version of SEFReleaseSuperBlock(). "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"See Also:")," ",(0,l.kt)("a",{parentName:"p",href:"/SEF_API/sef-api00#function-SEFReleaseSuperBlock"},"SEFReleaseSuperBlock()")," "),(0,l.kt)("h4",{id:"parameters-of-sefreleasesuperblockasync"},"Parameters of SEFReleaseSuperBlockAsync"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFQoSHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"qosHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the QoS Domain")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api03#struct-SEFReleaseSuperBlockIOCB"},"struct SEFReleaseSuperBlockIOCB*")),(0,l.kt)("td",{parentName:"tr",align:null},"iocb"),(0,l.kt)("td",{parentName:"tr",align:null},"In/Out"),(0,l.kt)("td",{parentName:"tr",align:null},"For asynchronous response from SEF Library Unused fields should be set to 0.")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFAllocateSuperBlockAsync"},"SEFAllocateSuperBlockAsync"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"void SEFAllocateSuperBlockAsync(SEFQoSHandle qosHandle, struct SEFAllocateSuperBlockIOCB *iocb)\n")),(0,l.kt)("p",null,"This function is the asynchronous version of SEFAllocateSuperBlock(). "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"See Also:")," ",(0,l.kt)("a",{parentName:"p",href:"/SEF_API/sef-api00#function-SEFAllocateSuperBlock"},"SEFAllocateSuperBlock()")," "),(0,l.kt)("h4",{id:"parameters-of-sefallocatesuperblockasync"},"Parameters of SEFAllocateSuperBlockAsync"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFQoSHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"qosHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the QoS Domain")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api03#struct-SEFAllocateSuperBlockIOCB"},"struct SEFAllocateSuperBlockIOCB*")),(0,l.kt)("td",{parentName:"tr",align:null},"iocb"),(0,l.kt)("td",{parentName:"tr",align:null},"In/Out"),(0,l.kt)("td",{parentName:"tr",align:null},"For asynchronous response from SEF Library Unused fields should be set to 0.")))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"function-SEFCloseSuperBlockAsync"},"SEFCloseSuperBlockAsync"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"void SEFCloseSuperBlockAsync(SEFQoSHandle qosHandle, struct SEFCloseSuperBlockIOCB *iocb)\n")),(0,l.kt)("p",null,"This function is the asynchronous version of SEFCloseSuperBlock().\nkSuperBlockStateChanged will have been sent before the completion routine is called and the iocb is marked as done."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"See Also:")," ",(0,l.kt)("a",{parentName:"p",href:"/SEF_API/sef-api00#function-SEFCloseSuperBlock"},"SEFCloseSuperBlock()")," "),(0,l.kt)("h4",{id:"parameters-of-sefclosesuperblockasync"},"Parameters of SEFCloseSuperBlockAsync"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SEFQoSHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"qosHandle"),(0,l.kt)("td",{parentName:"tr",align:null},"In"),(0,l.kt)("td",{parentName:"tr",align:null},"Handle to the QoS Domain")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/SEF_API/sef-api03#struct-SEFCloseSuperBlockIOCB"},"struct SEFCloseSuperBlockIOCB*")),(0,l.kt)("td",{parentName:"tr",align:null},"iocb"),(0,l.kt)("td",{parentName:"tr",align:null},"In/Out"),(0,l.kt)("td",{parentName:"tr",align:null},"For asynchronous response from SEF Library")))),(0,l.kt)("hr",null))}k.isMDXComponent=!0}}]);
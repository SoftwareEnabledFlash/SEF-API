"use strict";(self.webpackChunkweb_doc=self.webpackChunkweb_doc||[]).push([[172],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return p}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),f=l(n),p=i,m=f["".concat(u,".").concat(p)]||f[p]||d[p]||a;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function p(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=f;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},3946:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return p},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],s={sidebar_position:5},u="Software-Enabled Flash\u2122 (SEF) Unit",l={unversionedId:"sef-unit",id:"version-1.10/sef-unit",title:"Software-Enabled Flash\u2122 (SEF) Unit",description:"A SEF Unit is a set of dies and the associated control logic and (optional) DRAM. The dies are",source:"@site/versioned_docs/version-1.10/sef-unit.md",sourceDirName:".",slug:"/sef-unit",permalink:"/1.10/sef-unit",tags:[],version:"1.10",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Design Strategy",permalink:"/1.10/strategy"},next:{title:"Virtual Devices",permalink:"/1.10/virtual-devices"}},c={},d=[{value:"Figure 6.1: SEF Unit Geometry",id:"figure-61-sef-unit-geometry",level:4},{value:"Figure 6.2: Die Geometry",id:"figure-62-die-geometry",level:4}],f={toc:d};function p(e){var t=e.components,s=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},f,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"software-enabled-flash-sef-unit"},"Software-Enabled Flash\u2122 (SEF) Unit"),(0,a.kt)("p",null,"A SEF Unit is a set of dies and the associated control logic and (optional) DRAM. The dies are\ngrouped by user-defined rectangular regions to form a many-to-one mapping of dies to a virtual\ndevice. A virtual device represents physical isolation with the number of virtual devices limited by\nthe number of dies in the SEF Unit. Figure 6.1 shows an example of three virtual devices overlaid\non an 8 x 4 SEF Unit with eight dies left unallocated."),(0,a.kt)("h4",{id:"figure-61-sef-unit-geometry"},"Figure 6.1: SEF Unit Geometry"),(0,a.kt)("p",null,(0,a.kt)("img",{loading:"lazy",alt:"SEF Unit Geometry",src:n(8763).Z,width:"869",height:"529"})),(0,a.kt)("p",null,"As shown in the figure 6.2, a die is a set of blocks. The blocks are the erase unit for a SEF Unit\nand consist of a set of pages. A page spans the die planes and is the programing unit. A plane is\nmade up of atomic data units (ADUs). An ADU is the read/write unit holding both user data and\nmetadata. Metadata consists of a user-defined tag data (UA) and a SEF-unit-created monotonically\nincreasing serial number (SN)."),(0,a.kt)("h4",{id:"figure-62-die-geometry"},"Figure 6.2: Die Geometry"),(0,a.kt)("p",null,(0,a.kt)("img",{loading:"lazy",alt:"Die Geometry",src:n(2247).Z,width:"960",height:"494"})))}p.isMDXComponent=!0},2247:function(e,t,n){t.Z=n.p+"assets/images/die-geometry-6f15e3dc0ca60392858ba0c9435b6751.png"},8763:function(e,t,n){t.Z=n.p+"assets/images/sef-unit-geometry-8d68f46dd5e2aaa19a2076e727e9de73.png"}}]);
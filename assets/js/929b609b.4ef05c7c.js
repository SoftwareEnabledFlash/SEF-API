"use strict";(self.webpackChunkweb_doc=self.webpackChunkweb_doc||[]).push([[8431],{3905:(t,e,a)=>{a.d(e,{Zo:()=>m,kt:()=>N});var r=a(7294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function d(t,e){if(null==t)return{};var a,r,n=function(t,e){if(null==t)return{};var a,r,n={},l=Object.keys(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var s=r.createContext({}),u=function(t){var e=r.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},m=function(t){var e=u(t.components);return r.createElement(s.Provider,{value:e},t.children)},p="mdxType",o={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},k=r.forwardRef((function(t,e){var a=t.components,n=t.mdxType,l=t.originalType,s=t.parentName,m=d(t,["components","mdxType","originalType","parentName"]),p=u(a),k=n,N=p["".concat(s,".").concat(k)]||p[k]||o[k]||l;return a?r.createElement(N,i(i({ref:e},m),{},{components:a})):r.createElement(N,i({ref:e},m))}));function N(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var l=a.length,i=new Array(l);i[0]=k;var d={};for(var s in e)hasOwnProperty.call(e,s)&&(d[s]=e[s]);d.originalType=t,d[p]="string"==typeof t?t:n,i[1]=d;for(var u=2;u<l;u++)i[u]=a[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}k.displayName="MDXCreateElement"},5864:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>o,frontMatter:()=>l,metadata:()=>d,toc:()=>u});var r=a(7462),n=(a(7294),a(3905));const l={},i="Common Structures",d={unversionedId:"SEF_API/sef-api02",id:"version-1.13/SEF_API/sef-api02",title:"Common Structures",description:"SEFUserAddressLbaBits",source:"@site/versioned_docs/version-1.13/SEF_API/sef-api02.md",sourceDirName:"SEF_API",slug:"/SEF_API/sef-api02",permalink:"/SEF-API/1.13/SEF_API/sef-api02",draft:!1,tags:[],version:"1.13",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Data Access Commands",permalink:"/SEF-API/1.13/SEF_API/sef-api01"},next:{title:"Callback Structures",permalink:"/SEF-API/1.13/SEF_API/sef-api03"}},s={},u=[{value:"SEFUserAddressLbaBits",id:"macro-SEFUserAddressLbaBits",level:2},{value:"SEFUserAddressMetaBits",id:"macro-SEFUserAddressMetaBits",level:2},{value:"SEFAutoAllocate",id:"macro-SEFAutoAllocate",level:2},{value:"SEFUserAddressIgnore",id:"macro-SEFUserAddressIgnore",level:2},{value:"SEFNullFlashAddress",id:"macro-SEFNullFlashAddress",level:2},{value:"SEFIsNullFlashAddress",id:"function-SEFIsNullFlashAddress",level:2},{value:"Parameters of SEFIsNullFlashAddress",id:"parameters-of-sefisnullflashaddress",level:4},{value:"Return value of SEFIsNullFlashAddress",id:"return-value-of-sefisnullflashaddress",level:4},{value:"SEFIsEqualFlashAddress",id:"function-SEFIsEqualFlashAddress",level:2},{value:"Parameters of SEFIsEqualFlashAddress",id:"parameters-of-sefisequalflashaddress",level:4},{value:"Return value of SEFIsEqualFlashAddress",id:"return-value-of-sefisequalflashaddress",level:4},{value:"SEFNextFlashAddress",id:"function-SEFNextFlashAddress",level:2},{value:"Parameters of SEFNextFlashAddress",id:"parameters-of-sefnextflashaddress",level:4},{value:"Return value of SEFNextFlashAddress",id:"return-value-of-sefnextflashaddress",level:4},{value:"SEFStatus",id:"struct-SEFStatus",level:2},{value:"Members of SEFStatus",id:"members-of-sefstatus",level:4},{value:"SEFVirtualDeviceID",id:"struct-SEFVirtualDeviceID",level:2},{value:"Members of SEFVirtualDeviceID",id:"members-of-sefvirtualdeviceid",level:4},{value:"SEFQoSDomainID",id:"struct-SEFQoSDomainID",level:2},{value:"Members of SEFQoSDomainID",id:"members-of-sefqosdomainid",level:4},{value:"SEFPlacementID",id:"struct-SEFPlacementID",level:2},{value:"Members of SEFPlacementID",id:"members-of-sefplacementid",level:4},{value:"SEFADUsize",id:"struct-SEFADUsize",level:2},{value:"Members of SEFADUsize",id:"members-of-sefadusize",level:4},{value:"SEFInfo",id:"struct-SEFInfo",level:2},{value:"Members of SEFInfo",id:"members-of-sefinfo",level:4},{value:"SEFVirtualDeviceList",id:"struct-SEFVirtualDeviceList",level:2},{value:"Members of SEFVirtualDeviceList",id:"members-of-sefvirtualdevicelist",level:4},{value:"SEFQoSDomainList",id:"struct-SEFQoSDomainList",level:2},{value:"Members of SEFQoSDomainList",id:"members-of-sefqosdomainlist",level:4},{value:"SEFUserAddress",id:"struct-SEFUserAddress",level:2},{value:"Members of SEFUserAddress",id:"members-of-sefuseraddress",level:4},{value:"SEFFlashAddress",id:"struct-SEFFlashAddress",level:2},{value:"Members of SEFFlashAddress",id:"members-of-sefflashaddress",level:4},{value:"SEFDieList",id:"struct-SEFDieList",level:2},{value:"Members of SEFDieList",id:"members-of-sefdielist",level:4},{value:"SEFWeights",id:"struct-SEFWeights",level:2},{value:"Members of SEFWeights",id:"members-of-sefweights",level:4},{value:"SEFVirtualDeviceConfig",id:"struct-SEFVirtualDeviceConfig",level:2},{value:"Members of SEFVirtualDeviceConfig",id:"members-of-sefvirtualdeviceconfig",level:4},{value:"SEFVirtualDeviceUsage",id:"struct-SEFVirtualDeviceUsage",level:2},{value:"Members of SEFVirtualDeviceUsage",id:"members-of-sefvirtualdeviceusage",level:4},{value:"SEFVirtualDeviceSuspendConfig",id:"struct-SEFVirtualDeviceSuspendConfig",level:2},{value:"Members of SEFVirtualDeviceSuspendConfig",id:"members-of-sefvirtualdevicesuspendconfig",level:4},{value:"SEFVirtualDeviceInfo",id:"struct-SEFVirtualDeviceInfo",level:2},{value:"Members of SEFVirtualDeviceInfo",id:"members-of-sefvirtualdeviceinfo",level:4},{value:"SEFSuperBlockInfo",id:"struct-SEFSuperBlockInfo",level:2},{value:"Members of SEFSuperBlockInfo",id:"members-of-sefsuperblockinfo",level:4},{value:"SEFSuperBlockRecord",id:"struct-SEFSuperBlockRecord",level:2},{value:"Members of SEFSuperBlockRecord",id:"members-of-sefsuperblockrecord",level:4},{value:"SEFSuperBlockList",id:"struct-SEFSuperBlockList",level:2},{value:"Members of SEFSuperBlockList",id:"members-of-sefsuperblocklist",level:4},{value:"SEFQoSDomainInfo",id:"struct-SEFQoSDomainInfo",level:2},{value:"Members of SEFQoSDomainInfo",id:"members-of-sefqosdomaininfo",level:4},{value:"SEFWearInfo",id:"struct-SEFWearInfo",level:2},{value:"Members of SEFWearInfo",id:"members-of-sefwearinfo",level:4},{value:"SEFRefreshInfo",id:"struct-SEFRefreshInfo",level:2},{value:"Members of SEFRefreshInfo",id:"members-of-sefrefreshinfo",level:4},{value:"SEFCheckInfo",id:"struct-SEFCheckInfo",level:2},{value:"Members of SEFCheckInfo",id:"members-of-sefcheckinfo",level:4},{value:"SEFUserAddressList",id:"struct-SEFUserAddressList",level:2},{value:"Members of SEFUserAddressList",id:"members-of-sefuseraddresslist",level:4},{value:"SEFProperty",id:"struct-SEFProperty",level:2},{value:"Members of SEFProperty",id:"members-of-sefproperty",level:4},{value:"SEFWriteOverrides",id:"struct-SEFWriteOverrides",level:2},{value:"Members of SEFWriteOverrides",id:"members-of-sefwriteoverrides",level:4},{value:"SEFReadOverrides",id:"struct-SEFReadOverrides",level:2},{value:"Members of SEFReadOverrides",id:"members-of-sefreadoverrides",level:4},{value:"SEFAllocateOverrides",id:"struct-SEFAllocateOverrides",level:2},{value:"Members of SEFAllocateOverrides",id:"members-of-sefallocateoverrides",level:4},{value:"SEFCopySource",id:"struct-SEFCopySource",level:2},{value:"Members of SEFCopySource",id:"members-of-sefcopysource",level:4},{value:"SEFUserAddressFilter",id:"struct-SEFUserAddressFilter",level:2},{value:"Members of SEFUserAddressFilter",id:"members-of-sefuseraddressfilter",level:4},{value:"SEFAddressChangeRequest",id:"struct-SEFAddressChangeRequest",level:2},{value:"Members of SEFAddressChangeRequest",id:"members-of-sefaddresschangerequest",level:4},{value:"SEFCopyOverrides",id:"struct-SEFCopyOverrides",level:2},{value:"Members of SEFCopyOverrides",id:"members-of-sefcopyoverrides",level:4}],m={toc:u},p="wrapper";function o(t){let{components:e,...a}=t;return(0,n.kt)(p,(0,r.Z)({},m,a,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"common-structures"},"Common Structures"),(0,n.kt)("h2",{id:"macro-SEFUserAddressLbaBits"},"SEFUserAddressLbaBits"),(0,n.kt)("p",null,"Number of bits in a user address lba value. "),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Definition"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"SEFUserAddressLbaBits"),(0,n.kt)("td",{parentName:"tr",align:null},"40")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"macro-SEFUserAddressMetaBits"},"SEFUserAddressMetaBits"),(0,n.kt)("p",null,"Number of bits in a user address meta value. "),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Definition"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"SEFUserAddressMetaBits"),(0,n.kt)("td",{parentName:"tr",align:null},"(64-SEFUserAddressLbaBits)")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"macro-SEFAutoAllocate"},"SEFAutoAllocate"),(0,n.kt)("p",null,"Flash address value to indicate device should allocate the super block while doing a write. "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See Also:")," ",(0,n.kt)("a",{parentName:"p",href:"/SEF-API/1.13/SEF_API/sef-api01#function-SEFWriteWithoutPhysicalAddress"},"SEFWriteWithoutPhysicalAddress()")," "),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Definition"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"SEFAutoAllocate"),(0,n.kt)("td",{parentName:"tr",align:null},"((struct SEFFlashAddress) {UINT64","_","C(0xffffffffffffffff)})")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"macro-SEFUserAddressIgnore"},"SEFUserAddressIgnore"),(0,n.kt)("p",null,"User address value to indicate it should not be validated by the SEF device. "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"See Also:")," ",(0,n.kt)("a",{parentName:"p",href:"/SEF-API/1.13/SEF_API/sef-api01#function-SEFReadWithPhysicalAddress"},"SEFReadWithPhysicalAddress()")," "),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Definition"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"SEFUserAddressIgnore"),(0,n.kt)("td",{parentName:"tr",align:null},"((struct SEFUserAddress) {UINT64","_","C(0xffffffffffffffff)})")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"macro-SEFNullFlashAddress"},"SEFNullFlashAddress"),(0,n.kt)("p",null,"Flash address value indicating empty. "),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Definition"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"SEFNullFlashAddress"),(0,n.kt)("td",{parentName:"tr",align:null},"((struct SEFFlashAddress){(int64","_","t)0x0})")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"function-SEFIsNullFlashAddress"},"SEFIsNullFlashAddress"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"static int SEFIsNullFlashAddress(struct SEFFlashAddress flashAddress)\n")),(0,n.kt)("p",null,"Checks whether the flash address is null. "),(0,n.kt)("h4",{id:"parameters-of-sefisnullflashaddress"},"Parameters of SEFIsNullFlashAddress"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Direction"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFFlashAddress"},"struct SEFFlashAddress")),(0,n.kt)("td",{parentName:"tr",align:null},"flashAddress"),(0,n.kt)("td",{parentName:"tr",align:null},"In"),(0,n.kt)("td",{parentName:"tr",align:null},"The opaque address to be checked")))),(0,n.kt)("h4",{id:"return-value-of-sefisnullflashaddress"},"Return value of SEFIsNullFlashAddress"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"int"),(0,n.kt)("td",{parentName:"tr",align:null},"Returns 1 if the flashAddress is null")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"function-SEFIsEqualFlashAddress"},"SEFIsEqualFlashAddress"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"static int SEFIsEqualFlashAddress(struct SEFFlashAddress flashAddress1, struct SEFFlashAddress flashAddress2)\n")),(0,n.kt)("p",null,"Checks whether two flash addresses are equal. "),(0,n.kt)("h4",{id:"parameters-of-sefisequalflashaddress"},"Parameters of SEFIsEqualFlashAddress"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Direction"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFFlashAddress"},"struct SEFFlashAddress")),(0,n.kt)("td",{parentName:"tr",align:null},"flashAddress1"),(0,n.kt)("td",{parentName:"tr",align:null},"In"),(0,n.kt)("td",{parentName:"tr",align:null},"The opaque address to be compared")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFFlashAddress"},"struct SEFFlashAddress")),(0,n.kt)("td",{parentName:"tr",align:null},"flashAddress2"),(0,n.kt)("td",{parentName:"tr",align:null},"In"),(0,n.kt)("td",{parentName:"tr",align:null},"The opaque address to be compared")))),(0,n.kt)("h4",{id:"return-value-of-sefisequalflashaddress"},"Return value of SEFIsEqualFlashAddress"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"int"),(0,n.kt)("td",{parentName:"tr",align:null},"Returns 1 if the flashAddress1 equals flashAddress2")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"function-SEFNextFlashAddress"},"SEFNextFlashAddress"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"struct SEFFlashAddress SEFNextFlashAddress(SEFQoSHandle qosHandle, struct SEFFlashAddress flashAddress)\n")),(0,n.kt)("p",null,"Returns the next flash address by incrementing the ADU Offset.\nDoesn't guarantee that the returned flash address is valid"),(0,n.kt)("h4",{id:"parameters-of-sefnextflashaddress"},"Parameters of SEFNextFlashAddress"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Direction"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"SEFQoSHandle"),(0,n.kt)("td",{parentName:"tr",align:null},"qosHandle"),(0,n.kt)("td",{parentName:"tr",align:null},"In"),(0,n.kt)("td",{parentName:"tr",align:null},"Handle to a QoS Domain to interpret/parse the flash address.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFFlashAddress"},"struct SEFFlashAddress")),(0,n.kt)("td",{parentName:"tr",align:null},"flashAddress"),(0,n.kt)("td",{parentName:"tr",align:null},"In"),(0,n.kt)("td",{parentName:"tr",align:null},"The opaque address to be incremented")))),(0,n.kt)("h4",{id:"return-value-of-sefnextflashaddress"},"Return value of SEFNextFlashAddress"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"struct SEFFlashAddress"),(0,n.kt)("td",{parentName:"tr",align:null},"Returns the next flash address if the qosHandle is valid, otherwise it returns SEFNullFlashAddress.")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFStatus"},"SEFStatus"),(0,n.kt)("h4",{id:"members-of-sefstatus"},"Members of SEFStatus"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"int32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"error"),(0,n.kt)("td",{parentName:"tr",align:null},"Status information")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"int32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"info"),(0,n.kt)("td",{parentName:"tr",align:null},"Additional context-based descriptive information")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFVirtualDeviceID"},"SEFVirtualDeviceID"),(0,n.kt)("h4",{id:"members-of-sefvirtualdeviceid"},"Members of SEFVirtualDeviceID"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"id")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFQoSDomainID"},"SEFQoSDomainID"),(0,n.kt)("h4",{id:"members-of-sefqosdomainid"},"Members of SEFQoSDomainID"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"id")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFPlacementID"},"SEFPlacementID"),(0,n.kt)("h4",{id:"members-of-sefplacementid"},"Members of SEFPlacementID"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"id")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFADUsize"},"SEFADUsize"),(0,n.kt)("h4",{id:"members-of-sefadusize"},"Members of SEFADUsize"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"data"),(0,n.kt)("td",{parentName:"tr",align:null},"ADU data size in bytes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"meta"),(0,n.kt)("td",{parentName:"tr",align:null},"ADU meta data size in bytes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"reserved"),(0,n.kt)("td",{parentName:"tr",align:null},"Reserved/unused")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFInfo"},"SEFInfo"),(0,n.kt)("h4",{id:"members-of-sefinfo"},"Members of SEFInfo"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"const char *"),(0,n.kt)("td",{parentName:"tr",align:null},"name"),(0,n.kt)("td",{parentName:"tr",align:null},"Device Name from O/S")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"char","[8]"),(0,n.kt)("td",{parentName:"tr",align:null},"vendor"),(0,n.kt)("td",{parentName:"tr",align:null},"Vendor field")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"char","[20]"),(0,n.kt)("td",{parentName:"tr",align:null},"serialNumber"),(0,n.kt)("td",{parentName:"tr",align:null},"Device serial number")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"char","[8]"),(0,n.kt)("td",{parentName:"tr",align:null},"FWVersion"),(0,n.kt)("td",{parentName:"tr",align:null},"Device firmware version")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"char","[8]"),(0,n.kt)("td",{parentName:"tr",align:null},"HWVersion"),(0,n.kt)("td",{parentName:"tr",align:null},"Device hardware version")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"unitNumber"),(0,n.kt)("td",{parentName:"tr",align:null},"Unit number of the SEFInfo struct")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"APIVersion"),(0,n.kt)("td",{parentName:"tr",align:null},"API Version")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint64","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"supportedOptions"),(0,n.kt)("td",{parentName:"tr",align:null},"Supported features - see kSupported defines")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"maxQoSDomains"),(0,n.kt)("td",{parentName:"tr",align:null},"Hardware version specific, may be less than 65535 defined by architecture")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"maxRootPointers"),(0,n.kt)("td",{parentName:"tr",align:null},"Firmware version specific, may be less than 8 defined by architecture")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"maxPlacementIDs"),(0,n.kt)("td",{parentName:"tr",align:null},"Firmware version specific, max number of auto opened super blocks per QoS Domain")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"maxOpenSuperBlocks"),(0,n.kt)("td",{parentName:"tr",align:null},"Firmware version specific, max number of open super blocks for the device. When 0, the limit is per Virtual Device instead. SEFVirtualDeviceInfo")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numReadQueues"),(0,n.kt)("td",{parentName:"tr",align:null},"Firmware version specific, max number of read queues total")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numVirtualDevices"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of currently defined virtual devices")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numQoSDomains"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of currently defined QoS Domains")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numBanks"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of banks per channel")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numChannels"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of channels per SEF Unit")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numPlanes"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of planes per die")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"pageSize"),(0,n.kt)("td",{parentName:"tr",align:null},"Physical page size")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numPages"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of pages per block")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numBlocks"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of blocks per die")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"totalBandWidth"),(0,n.kt)("td",{parentName:"tr",align:null},"Total bandwidth in MiBs corresponding to the underlying flash component on this device")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"readTime"),(0,n.kt)("td",{parentName:"tr",align:null},"Read time in microseconds corresponding to the underlying flash components on this device")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"programTime"),(0,n.kt)("td",{parentName:"tr",align:null},"Program time in microseconds corresponding to the underlying flash components on this device")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"eraseTime"),(0,n.kt)("td",{parentName:"tr",align:null},"Erase time in microseconds corresponding to the underlying flash components on this device")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"minReadWeight"),(0,n.kt)("td",{parentName:"tr",align:null},"Advisory minimum read weight to allow timely house keeping internal I/O")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"minWriteWeight"),(0,n.kt)("td",{parentName:"tr",align:null},"Advisory minimum write weight to allow timely house keeping internal I/O")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"openExpirationPeriod"),(0,n.kt)("td",{parentName:"tr",align:null},"Granularity in seconds for entire block")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"reserved","_","0"),(0,n.kt)("td",{parentName:"tr",align:null},"Reserved/unused")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numADUSizes"),(0,n.kt)("td",{parentName:"tr",align:null},"Size of ADUsize array that follows at end of structure")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFADUsize"},"struct SEFADUsize[]")),(0,n.kt)("td",{parentName:"tr",align:null},"ADUsize"),(0,n.kt)("td",{parentName:"tr",align:null},"Array of supported ADU sizes")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFVirtualDeviceList"},"SEFVirtualDeviceList"),(0,n.kt)("h4",{id:"members-of-sefvirtualdevicelist"},"Members of SEFVirtualDeviceList"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numVirtualDevices"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of virtual devices")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFVirtualDeviceID"},"struct SEFVirtualDeviceID[]")),(0,n.kt)("td",{parentName:"tr",align:null},"virtualDeviceID"),(0,n.kt)("td",{parentName:"tr",align:null},"An Array of all Virtual device IDs")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFQoSDomainList"},"SEFQoSDomainList"),(0,n.kt)("h4",{id:"members-of-sefqosdomainlist"},"Members of SEFQoSDomainList"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numQoSDomains"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of QoS domains")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFQoSDomainID"},"struct SEFQoSDomainID[]")),(0,n.kt)("td",{parentName:"tr",align:null},"QoSDomainID"),(0,n.kt)("td",{parentName:"tr",align:null},"An Array of all QoS Domain IDs")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFUserAddress"},"SEFUserAddress"),(0,n.kt)("p",null,"Structure of SEFUserAddress may be redefined by user.\nThe limitations for redefining the structure are: - size must be 8 bytes"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"multi-adu writes will auto increment the LBA value and must not equal SEFUserAddressIgnore. However SEFUserAddressIgnore is supported as a starting user address.")),(0,n.kt)("p",null,"For kSuperBlock, the LBA is limited to 40 bits and the meta to 24. The unformatted member is in little endian format. "),(0,n.kt)("h4",{id:"members-of-sefuseraddress"},"Members of SEFUserAddress"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint64","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"unformatted")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFFlashAddress"},"SEFFlashAddress"),(0,n.kt)("p",null,"Opaque flash address value parsable by SEFParseFlashAddress()"),(0,n.kt)("h4",{id:"members-of-sefflashaddress"},"Members of SEFFlashAddress"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint64","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"bits")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFDieList"},"SEFDieList"),(0,n.kt)("h4",{id:"members-of-sefdielist"},"Members of SEFDieList"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numDies"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of dies in dieIDs")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t[]"),(0,n.kt)("td",{parentName:"tr",align:null},"dieIDs"),(0,n.kt)("td",{parentName:"tr",align:null},"List of dies by ID")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFWeights"},"SEFWeights"),(0,n.kt)("p",null,"Relative die time weights for write type of I/O operations. "),(0,n.kt)("h4",{id:"members-of-sefweights"},"Members of SEFWeights"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"eraseWeight"),(0,n.kt)("td",{parentName:"tr",align:null},"Default weight for an erase operation by SEFAllocateSuperBlock, SEFFlushSuperBlock and SEFCloseSuperBlock")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"programWeight"),(0,n.kt)("td",{parentName:"tr",align:null},"Default weight for a program operation by the Nameless Write and Nameless Copy commands")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFVirtualDeviceConfig"},"SEFVirtualDeviceConfig"),(0,n.kt)("h4",{id:"members-of-sefvirtualdeviceconfig"},"Members of SEFVirtualDeviceConfig"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFVirtualDeviceID"},"struct SEFVirtualDeviceID")),(0,n.kt)("td",{parentName:"tr",align:null},"virtualDeviceID"),(0,n.kt)("td",{parentName:"tr",align:null},"Virtual Device ID")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numReadQueues"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of read queues to define for this Virtual Device")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"reserved"),(0,n.kt)("td",{parentName:"tr",align:null},"Reserved, must be initialized to zero")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t","[SEFMaxReadQueues]"),(0,n.kt)("td",{parentName:"tr",align:null},"readWeights"),(0,n.kt)("td",{parentName:"tr",align:null},"Default weight for read operations for each possible read queue")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"superBlockDies"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of dies in a super block, 0 uses dieList.numDies")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFDieList"},"struct SEFDieList")),(0,n.kt)("td",{parentName:"tr",align:null},"dieList"),(0,n.kt)("td",{parentName:"tr",align:null},"List of dies in ascending order for the Virtual Device")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFVirtualDeviceUsage"},"SEFVirtualDeviceUsage"),(0,n.kt)("h4",{id:"members-of-sefvirtualdeviceusage"},"Members of SEFVirtualDeviceUsage"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"eraseCount"),(0,n.kt)("td",{parentName:"tr",align:null},"Count of super blocks erased. Used to populate eraseOrder in SEFSuperBlockInfo")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numUnallocatedSuperBlocks"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of unallocated super blocks")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numSuperBlocks"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of allocated super blocks")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numUnallocatedPSLCSuperBlocks"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of unallocated pSLC super blocks")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numPSLCSuperBlocks"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of allocated pSLC super blocks")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFVirtualDeviceID"},"struct SEFVirtualDeviceID")),(0,n.kt)("td",{parentName:"tr",align:null},"vdID"),(0,n.kt)("td",{parentName:"tr",align:null},"Virtual device ID of the handle")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"averagePEcount"),(0,n.kt)("td",{parentName:"tr",align:null},"Average program/erase count")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"maxPEcount"),(0,n.kt)("td",{parentName:"tr",align:null},"Max program/erase count")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"patrolCycleTime"),(0,n.kt)("td",{parentName:"tr",align:null},"Recommended Patrol Cycle in minutes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"reserved"),(0,n.kt)("td",{parentName:"tr",align:null},"Reserved, must be initialized to zero")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFVirtualDeviceSuspendConfig"},"SEFVirtualDeviceSuspendConfig"),(0,n.kt)("p",null,"Configuration for Erase/Program suspend.\nThe weights supplied with i/o represents virtual time. These parameters control how often, and for how long an erase/program can be interrupted by reads. "),(0,n.kt)("h4",{id:"members-of-sefvirtualdevicesuspendconfig"},"Members of SEFVirtualDeviceSuspendConfig"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"maxTimePerSuspend")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"minTimeUntilSuspend")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"maxSuspendInterval")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFVirtualDeviceInfo"},"SEFVirtualDeviceInfo"),(0,n.kt)("h4",{id:"members-of-sefvirtualdeviceinfo"},"Members of SEFVirtualDeviceInfo"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint64","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"flashCapacity"),(0,n.kt)("td",{parentName:"tr",align:null},"Flash capacity in 4k ADUs")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint64","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"flashAvailable"),(0,n.kt)("td",{parentName:"tr",align:null},"Available flash capacity in 4k ADUs")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint64","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"pSLCFlashCapacity"),(0,n.kt)("td",{parentName:"tr",align:null},"pSLC Flash capacity in 4k ADUs")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint64","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"pSLCFlashAvailable"),(0,n.kt)("td",{parentName:"tr",align:null},"pSLC Available flash capacity in 4k ADUs")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"superBlockCapacity"),(0,n.kt)("td",{parentName:"tr",align:null},"Super block capacity in 4k ADUs")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"pSLCSuperBlockCapacity"),(0,n.kt)("td",{parentName:"tr",align:null},"pSLC super block capacity in 4k ADUs")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"maxOpenSuperBlocks"),(0,n.kt)("td",{parentName:"tr",align:null},"Maximum number of open super blocks per Virtual Device. When 0, the limit is per device instead. See SEFInfo")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numPSLCSuperBLocks"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of pSLC super blocks")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFVirtualDeviceSuspendConfig"},"struct SEFVirtualDeviceSuspendConfig")),(0,n.kt)("td",{parentName:"tr",align:null},"suspendConfig"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"superBlockDies"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of dies used for a super block")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"aduOffsetBitWidth"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of bits that make up the adu offset in a flash address")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"superBlockIdBitWidth"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of bits that make up the super block id in a flash address")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t","[SEFMaxReadQueues]"),(0,n.kt)("td",{parentName:"tr",align:null},"readWeights"),(0,n.kt)("td",{parentName:"tr",align:null},"Default weight for read operations for each possible read queue")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numReadQueues"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of read queues defined for the Virtual Device")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8","_","t","[5]"),(0,n.kt)("td",{parentName:"tr",align:null},"reserved"),(0,n.kt)("td",{parentName:"tr",align:null},"Reserved, must be initialized to zero")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFQoSDomainList"},"struct SEFQoSDomainList")),(0,n.kt)("td",{parentName:"tr",align:null},"QoSDomains"),(0,n.kt)("td",{parentName:"tr",align:null},"List of domains")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFSuperBlockInfo"},"SEFSuperBlockInfo"),(0,n.kt)("h4",{id:"members-of-sefsuperblockinfo"},"Members of SEFSuperBlockInfo"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFFlashAddress"},"struct SEFFlashAddress")),(0,n.kt)("td",{parentName:"tr",align:null},"flashAddress"),(0,n.kt)("td",{parentName:"tr",align:null},"Flash address where this super block resides")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"eraseOrder"),(0,n.kt)("td",{parentName:"tr",align:null},"Indication of when a super block was erased. Can be used to determine the order blocks were allocated or to version a super block. Values only increase over time and are unique at the Virtual Device level")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"writableADUs"),(0,n.kt)("td",{parentName:"tr",align:null},"For a fresh, unwritten, open super block, this how much QoS Domain quota is being used by the super block. It will decrease if defects are encountered while writing")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"writtenADUs"),(0,n.kt)("td",{parentName:"tr",align:null},"This field increases as ADUs in the super block are written. For kPerfect and kPacked, it will equal writableADUs when the block is closed. For kFragmented, it will equal super block capacity because it includes defective portions of the flash")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFPlacementID"},"struct SEFPlacementID")),(0,n.kt)("td",{parentName:"tr",align:null},"placementID"),(0,n.kt)("td",{parentName:"tr",align:null},"When auto-allocated, indicates the placement id supplied to SEFWriteWithoutPhysicalAddress(). Otherwise it will be SEFPlacementIdUnused")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numDefects"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of defective planes per super page. This may increase as the super block is written")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"timeLeft"),(0,n.kt)("td",{parentName:"tr",align:null},"Time in minutes left to handle an integrity that is not kIntegrityGood before risking data loss")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"PEIndex"),(0,n.kt)("td",{parentName:"tr",align:null},"This is the block's erase count normalized to be between 0 and 255")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api05#enum-SEFSuperBlockType"},"enum SEFSuperBlockType")),(0,n.kt)("td",{parentName:"tr",align:null},"type"),(0,n.kt)("td",{parentName:"tr",align:null},"This is the type of the super block, normal or pSLC")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api05#enum-SEFSuperBlockState"},"enum SEFSuperBlockState")),(0,n.kt)("td",{parentName:"tr",align:null},"state"),(0,n.kt)("td",{parentName:"tr",align:null},"This is the block's current state")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api05#enum-SEFDataIntegrity"},"enum SEFDataIntegrity")),(0,n.kt)("td",{parentName:"tr",align:null},"integrity"),(0,n.kt)("td",{parentName:"tr",align:null},"This is the integrity of the super block, If not kIntegrityGood, the super block requires a SEFCheckSuperBlock to patrol or refresh")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8","_","t[]"),(0,n.kt)("td",{parentName:"tr",align:null},"defects"),(0,n.kt)("td",{parentName:"tr",align:null},"This is a bitmap indicating which planes are dective. SEFQoSDomainInfo::defectMapSize is the size of this field.")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFSuperBlockRecord"},"SEFSuperBlockRecord"),(0,n.kt)("p",null,"Entry in a SEFSuperBlockList. "),(0,n.kt)("h4",{id:"members-of-sefsuperblockrecord"},"Members of SEFSuperBlockRecord"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFFlashAddress"},"struct SEFFlashAddress")),(0,n.kt)("td",{parentName:"tr",align:null},"flashAddress"),(0,n.kt)("td",{parentName:"tr",align:null},"Flash address where this super block resides")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8","_","t","[6]"),(0,n.kt)("td",{parentName:"tr",align:null},"reserved"),(0,n.kt)("td",{parentName:"tr",align:null},"Reserved")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"PEIndex"),(0,n.kt)("td",{parentName:"tr",align:null},"This is the block's erase count normalized to be between 0 and 255")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api05#enum-SEFSuperBlockState"},"enum SEFSuperBlockState")),(0,n.kt)("td",{parentName:"tr",align:null},"state"),(0,n.kt)("td",{parentName:"tr",align:null},"This is the block's current state")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFSuperBlockList"},"SEFSuperBlockList"),(0,n.kt)("h4",{id:"members-of-sefsuperblocklist"},"Members of SEFSuperBlockList"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numSuperBlocks"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of super blocks in use by the QoS Domain")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"reserved"),(0,n.kt)("td",{parentName:"tr",align:null},"Reserved")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFSuperBlockRecord"},"struct SEFSuperBlockRecord[]")),(0,n.kt)("td",{parentName:"tr",align:null},"superBlockRecords"),(0,n.kt)("td",{parentName:"tr",align:null},"List of super block records")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFQoSDomainInfo"},"SEFQoSDomainInfo"),(0,n.kt)("h4",{id:"members-of-sefqosdomaininfo"},"Members of SEFQoSDomainInfo"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFVirtualDeviceID"},"struct SEFVirtualDeviceID")),(0,n.kt)("td",{parentName:"tr",align:null},"virtualDeviceID"),(0,n.kt)("td",{parentName:"tr",align:null},"Virtual device ID")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numPlacementIDs"),(0,n.kt)("td",{parentName:"tr",align:null},"Specifies the number of Placement IDs corresponding to this QoS Domain")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"encryption"),(0,n.kt)("td",{parentName:"tr",align:null},"0 for disabled, non-zero for enabled")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api05#enum-SEFErrorRecoveryMode"},"enum SEFErrorRecoveryMode")),(0,n.kt)("td",{parentName:"tr",align:null},"recoveryMode"),(0,n.kt)("td",{parentName:"tr",align:null},"Specifies the recovery mode for this QoS Domain")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api05#enum-SEFDefectManagementMethod"},"enum SEFDefectManagementMethod")),(0,n.kt)("td",{parentName:"tr",align:null},"defectStrategy"),(0,n.kt)("td",{parentName:"tr",align:null},"Defect management strategy for the QoS Domain")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api05#enum-SEFAPIIdentifier"},"enum SEFAPIIdentifier")),(0,n.kt)("td",{parentName:"tr",align:null},"api"),(0,n.kt)("td",{parentName:"tr",align:null},"Specifies the API Identifier for this QoS Domain")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint64","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"flashCapacity"),(0,n.kt)("td",{parentName:"tr",align:null},"Reserved capacity of the QoS Domain in QoS Domain ADUs")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint64","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"flashQuota"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of QoS Domain ADUs that can be allocated by the QoS Domain")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint64","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"pSLCFlashCapacity"),(0,n.kt)("td",{parentName:"tr",align:null},"Reserved pSLC capacity of the QoS Domain in QoS Domain ADUs")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint64","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"pSLCFlashQuota"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of pSLC QoS Domain ADUs that can be allocated by the QoS Domain")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFFlashAddress"},"struct SEFFlashAddress[SEFMaxRootPointer]")),(0,n.kt)("td",{parentName:"tr",align:null},"rootPointers"),(0,n.kt)("td",{parentName:"tr",align:null},"List of root pointers")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFADUsize"},"struct SEFADUsize")),(0,n.kt)("td",{parentName:"tr",align:null},"ADUsize"),(0,n.kt)("td",{parentName:"tr",align:null},"Size of QoS Domain ADUs, data and metadata in bytes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"superBlockCapacity"),(0,n.kt)("td",{parentName:"tr",align:null},"Super block capacity in QoS Domain ADUs")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"pSLCSuperBlockCapacity"),(0,n.kt)("td",{parentName:"tr",align:null},"pSLC super block capacity in QoS Domain ADUs")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"maxOpenSuperBlocks"),(0,n.kt)("td",{parentName:"tr",align:null},"Maximum number of open super blocks for the QoS Domain")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"defectMapSize"),(0,n.kt)("td",{parentName:"tr",align:null},"Size of a super block defect map")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFWeights"},"struct SEFWeights")),(0,n.kt)("td",{parentName:"tr",align:null},"weights"),(0,n.kt)("td",{parentName:"tr",align:null},"Default i/o weights for erase and program")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api05#enum-SEFDeadlineType"},"enum SEFDeadlineType")),(0,n.kt)("td",{parentName:"tr",align:null},"deadline"),(0,n.kt)("td",{parentName:"tr",align:null},"Deadline type for the QoS Domain")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"defaultReadQueue"),(0,n.kt)("td",{parentName:"tr",align:null},"Default read queue assignment")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numReadQueues"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of read queues as defined by the Virtual Device")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8","_","t","[5]"),(0,n.kt)("td",{parentName:"tr",align:null},"reserved"),(0,n.kt)("td",{parentName:"tr",align:null},"Reserved")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFWearInfo"},"SEFWearInfo"),(0,n.kt)("h4",{id:"members-of-sefwearinfo"},"Members of SEFWearInfo"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numSuperBlocks"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of super blocks")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"reserved","_","0"),(0,n.kt)("td",{parentName:"tr",align:null},"Reserved, must be initialized to zero")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFSuperBlockRecord"},"struct SEFSuperBlockRecord[]")),(0,n.kt)("td",{parentName:"tr",align:null},"superBlockRecords"),(0,n.kt)("td",{parentName:"tr",align:null},"List of super block records")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFRefreshInfo"},"SEFRefreshInfo"),(0,n.kt)("h4",{id:"members-of-sefrefreshinfo"},"Members of SEFRefreshInfo"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numSuperBlocks"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of super blocks")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"reserved","_","0"),(0,n.kt)("td",{parentName:"tr",align:null},"Reserved, must be initialized to zero")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFSuperBlockRecord"},"struct SEFSuperBlockRecord[]")),(0,n.kt)("td",{parentName:"tr",align:null},"superBlockRecords"),(0,n.kt)("td",{parentName:"tr",align:null},"List of super block records")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFCheckInfo"},"SEFCheckInfo"),(0,n.kt)("p",null,"SuperBlocks returned by SEFGetCheckList()"),(0,n.kt)("h4",{id:"members-of-sefcheckinfo"},"Members of SEFCheckInfo"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numSuperBlocks"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of super blocks")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"reserved","_","0"),(0,n.kt)("td",{parentName:"tr",align:null},"Reserved, must be initialized to zero")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFSuperBlockRecord"},"struct SEFSuperBlockRecord[]")),(0,n.kt)("td",{parentName:"tr",align:null},"superBlockRecords"),(0,n.kt)("td",{parentName:"tr",align:null},"List of super block records")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFUserAddressList"},"SEFUserAddressList"),(0,n.kt)("h4",{id:"members-of-sefuseraddresslist"},"Members of SEFUserAddressList"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numADUs"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of ADUs")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"reserved","_","0"),(0,n.kt)("td",{parentName:"tr",align:null},"Reserved, must be initialized to zero")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFUserAddress"},"struct SEFUserAddress[]")),(0,n.kt)("td",{parentName:"tr",align:null},"userAddressesRecovery"),(0,n.kt)("td",{parentName:"tr",align:null},"User addresses")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFProperty"},"SEFProperty"),(0,n.kt)("h4",{id:"members-of-sefproperty"},"Members of SEFProperty"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"union"),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"5 Members")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"\u2192 int"),(0,n.kt)("td",{parentName:"tr",align:null},"intVal"),(0,n.kt)("td",{parentName:"tr",align:null},"Valid when type is kSefPropertyTypeInt")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"\u2192 void *"),(0,n.kt)("td",{parentName:"tr",align:null},"ptr"),(0,n.kt)("td",{parentName:"tr",align:null},"Valid when type is kSefPropertyTypePtr")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"\u2192 ",(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFQoSDomainID"},"struct SEFQoSDomainID")),(0,n.kt)("td",{parentName:"tr",align:null},"qosID"),(0,n.kt)("td",{parentName:"tr",align:null},"Valid when type is kSefPropertyTypeQoSDomainID")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"\u2192 ",(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFVirtualDeviceID"},"struct SEFVirtualDeviceID")),(0,n.kt)("td",{parentName:"tr",align:null},"vdID"),(0,n.kt)("td",{parentName:"tr",align:null},"Valid when type is kSefPropertyTypeVirtualDeviceID")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"\u2192 void(",(0,n.kt)("em",{parentName:"td"},")(void "),", struct SEFQoSNotification)"),(0,n.kt)("td",{parentName:"tr",align:null},"qosNotify"),(0,n.kt)("td",{parentName:"tr",align:null},"Valid when type is kSefPropertyTypeQoSNotify")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api05#enum-SEFPropertyType"},"enum SEFPropertyType")),(0,n.kt)("td",{parentName:"tr",align:null},"type"),(0,n.kt)("td",{parentName:"tr",align:null},"Denotes the property type")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFWriteOverrides"},"SEFWriteOverrides"),(0,n.kt)("p",null,"Supplied to override default write weights.\nMay be used when calling SEFWriteWithoutPhysicalAddress() or SEFWriteWithoutPhysicalAddressAsync(). "),(0,n.kt)("h4",{id:"members-of-sefwriteoverrides"},"Members of SEFWriteOverrides"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"programWeight"),(0,n.kt)("td",{parentName:"tr",align:null},"Weight to use for program instead of the QoS domain default. 0 will use the QoS Domain default.")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFReadOverrides"},"SEFReadOverrides"),(0,n.kt)("p",null,"Supplied to override default read weight.\nMay be used when calling SEFReadWithPhysicalAddress() or SEFReadWithPhysicalAddressAsync(). "),(0,n.kt)("h4",{id:"members-of-sefreadoverrides"},"Members of SEFReadOverrides"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"readWeight"),(0,n.kt)("td",{parentName:"tr",align:null},"Weight to use for read instead of the read queue's default. 0 will use the read queue's default.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"readQueue"),(0,n.kt)("td",{parentName:"tr",align:null},"Read queue to use for read instead of QoS Domain's default. A value of 0 or greater than number of read queues defined for the QoS Domain will use the default read queue for the QoS Domain.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"reserved"),(0,n.kt)("td",{parentName:"tr",align:null},"Reserved, must be initialized to zero.")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFAllocateOverrides"},"SEFAllocateOverrides"),(0,n.kt)("p",null,"Supplied to override default super block allocation weight.\nMay be used when calling SEFAllocateSuperBlock() or SEFAllocateSuperBlockAsync(). "),(0,n.kt)("h4",{id:"members-of-sefallocateoverrides"},"Members of SEFAllocateOverrides"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"eraseWeight"),(0,n.kt)("td",{parentName:"tr",align:null},"Weight to use for erase instead of the QoS Domain default. 0 will use the QoS Domain default.")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFCopySource"},"SEFCopySource"),(0,n.kt)("p",null,"Source addresses for SEFNamelessCopy().\nThe Source addresses format controls if the validBitmap or list of flash addresses is used.SEFNamelessCopy()SEFUserAddressFilter"),(0,n.kt)("h4",{id:"members-of-sefcopysource"},"Members of SEFCopySource"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api05#enum-SEFCopySourceType"},"enum SEFCopySourceType")),(0,n.kt)("td",{parentName:"tr",align:null},"format"),(0,n.kt)("td",{parentName:"tr",align:null},"Specifies the format to use")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8","_","t","[3]"),(0,n.kt)("td",{parentName:"tr",align:null},"reserved","_","0"),(0,n.kt)("td",{parentName:"tr",align:null},"Reserved, must be initialized to zero")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"arraySize"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of items in bitmap array or Flash Address List (QWORD count)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"union"),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"2 Members")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"\u2192 ",(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFFlashAddress"},"const struct SEFFlashAddress*")),(0,n.kt)("td",{parentName:"tr",align:null},"flashAddressList"),(0,n.kt)("td",{parentName:"tr",align:null},"pointer to flash address list")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"\u2192 struct"),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"2 Members")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"\u2192 \u2192 ",(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFFlashAddress"},"struct SEFFlashAddress")),(0,n.kt)("td",{parentName:"tr",align:null},"srcFlashAddress"),(0,n.kt)("td",{parentName:"tr",align:null},"flash address of source block. ADU & ~0x3f indicates the ADU of bit 0 of validBitmap and ADU & 0x3f is the starting bit in validBitMap")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"\u2192 \u2192 const uint64","_","t *"),(0,n.kt)("td",{parentName:"tr",align:null},"validBitmap"),(0,n.kt)("td",{parentName:"tr",align:null},"pointer to COPY of valid bitmap array (little endian)")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFUserAddressFilter"},"SEFUserAddressFilter"),(0,n.kt)("p",null,"Optional filtering on user address data during copy. "),(0,n.kt)("h4",{id:"members-of-sefuseraddressfilter"},"Members of SEFUserAddressFilter"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFUserAddress"},"struct SEFUserAddress")),(0,n.kt)("td",{parentName:"tr",align:null},"userAddressStart"),(0,n.kt)("td",{parentName:"tr",align:null},"Starting user address of filter")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint64","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"userAddressRangeLength"),(0,n.kt)("td",{parentName:"tr",align:null},"Length of filter range (0 indicates no filtering)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"userAddressRangeType"),(0,n.kt)("td",{parentName:"tr",align:null},"Zero to copy data in range; non-zero to copy outside of range")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFAddressChangeRequest"},"SEFAddressChangeRequest"),(0,n.kt)("p",null,"Detailed information about results of the SEFNamelessCopy() request. "),(0,n.kt)("h4",{id:"members-of-sefaddresschangerequest"},"Members of SEFAddressChangeRequest"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numProcessedADUs"),(0,n.kt)("td",{parentName:"tr",align:null},"The number of processed ADUs including errors")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"nextADUOffset"),(0,n.kt)("td",{parentName:"tr",align:null},"Given a bitmap source, it indicates the next ADU offset of the source flash address; Given a list source, it indicates the next entry number in the source flash address list")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numReadErrorADUs"),(0,n.kt)("td",{parentName:"tr",align:null},"The number of ADUs that couldn't be processed due to errors")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numADUsLeft"),(0,n.kt)("td",{parentName:"tr",align:null},"The number of remaining ADUs in the destination super block")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"copyStatus"),(0,n.kt)("td",{parentName:"tr",align:null},"A bit array denoting the results of the request")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8","_","t","[7]"),(0,n.kt)("td",{parentName:"tr",align:null},"reserved"),(0,n.kt)("td",{parentName:"tr",align:null},"Reserved, must be initialized to zero")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"struct []"),(0,n.kt)("td",{parentName:"tr",align:null},"addressUpdate"),(0,n.kt)("td",{parentName:"tr",align:null},"3 Members; An array of information about copied ADUs")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"\u2192 ",(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFUserAddress"},"struct SEFUserAddress")),(0,n.kt)("td",{parentName:"tr",align:null},"userAddress"),(0,n.kt)("td",{parentName:"tr",align:null},"The user address")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"\u2192 ",(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFFlashAddress"},"struct SEFFlashAddress")),(0,n.kt)("td",{parentName:"tr",align:null},"oldFlashAddress"),(0,n.kt)("td",{parentName:"tr",align:null},"The old flash address")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"\u2192 ",(0,n.kt)("a",{parentName:"td",href:"/SEF-API/1.13/SEF_API/sef-api02#struct-SEFFlashAddress"},"struct SEFFlashAddress")),(0,n.kt)("td",{parentName:"tr",align:null},"newFlashAddress"),(0,n.kt)("td",{parentName:"tr",align:null},"The new flash address")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFCopyOverrides"},"SEFCopyOverrides"),(0,n.kt)("p",null,"Scheduling Queue overrides for SEFNamelessCopy()"),(0,n.kt)("h4",{id:"members-of-sefcopyoverrides"},"Members of SEFCopyOverrides"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"programWeight"),(0,n.kt)("td",{parentName:"tr",align:null},"Weight to use for program instead of the QoS domain default. 0 will use the QoS Domain default")))),(0,n.kt)("hr",null))}o.isMDXComponent=!0}}]);
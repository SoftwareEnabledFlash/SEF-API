"use strict";(self.webpackChunkweb_doc=self.webpackChunkweb_doc||[]).push([[7863],{3905:(t,e,a)=>{a.d(e,{Zo:()=>s,kt:()=>N});var r=a(7294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function d(t,e){if(null==t)return{};var a,r,n=function(t,e){if(null==t)return{};var a,r,n={},l=Object.keys(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var u=r.createContext({}),m=function(t){var e=r.useContext(u),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},s=function(t){var e=m(t.components);return r.createElement(u.Provider,{value:e},t.children)},o="mdxType",p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},k=r.forwardRef((function(t,e){var a=t.components,n=t.mdxType,l=t.originalType,u=t.parentName,s=d(t,["components","mdxType","originalType","parentName"]),o=m(a),k=n,N=o["".concat(u,".").concat(k)]||o[k]||p[k]||l;return a?r.createElement(N,i(i({ref:e},s),{},{components:a})):r.createElement(N,i({ref:e},s))}));function N(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var l=a.length,i=new Array(l);i[0]=k;var d={};for(var u in e)hasOwnProperty.call(e,u)&&(d[u]=e[u]);d.originalType=t,d[o]="string"==typeof t?t:n,i[1]=d;for(var m=2;m<l;m++)i[m]=a[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}k.displayName="MDXCreateElement"},8751:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>d,toc:()=>m});var r=a(7462),n=(a(7294),a(3905));const l={},i="Common Structures",d={unversionedId:"SEF_API/sef-api02",id:"version-1.10/SEF_API/sef-api02",title:"Common Structures",description:"SEFStatus",source:"@site/versioned_docs/version-1.10/SEF_API/sef-api02.md",sourceDirName:"SEF_API",slug:"/SEF_API/sef-api02",permalink:"/SEF-API/1.10/SEF_API/sef-api02",draft:!1,tags:[],version:"1.10",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Data Access Commands",permalink:"/SEF-API/1.10/SEF_API/sef-api01"},next:{title:"Callback Structures",permalink:"/SEF-API/1.10/SEF_API/sef-api03"}},u={},m=[{value:"SEFStatus",id:"struct-SEFStatus",level:2},{value:"Members of SEFStatus",id:"members-of-sefstatus",level:4},{value:"SEFVirtualDeviceID",id:"struct-SEFVirtualDeviceID",level:2},{value:"Members of SEFVirtualDeviceID",id:"members-of-sefvirtualdeviceid",level:4},{value:"SEFQoSDomainID",id:"struct-SEFQoSDomainID",level:2},{value:"Members of SEFQoSDomainID",id:"members-of-sefqosdomainid",level:4},{value:"SEFPlacementID",id:"struct-SEFPlacementID",level:2},{value:"Members of SEFPlacementID",id:"members-of-sefplacementid",level:4},{value:"SEFInfo",id:"struct-SEFInfo",level:2},{value:"Members of SEFInfo",id:"members-of-sefinfo",level:4},{value:"SEFVirtualDeviceList",id:"struct-SEFVirtualDeviceList",level:2},{value:"Members of SEFVirtualDeviceList",id:"members-of-sefvirtualdevicelist",level:4},{value:"SEFQoSDomainList",id:"struct-SEFQoSDomainList",level:2},{value:"Members of SEFQoSDomainList",id:"members-of-sefqosdomainlist",level:4},{value:"SEFUserAddress",id:"struct-SEFUserAddress",level:2},{value:"Members of SEFUserAddress",id:"members-of-sefuseraddress",level:4},{value:"SEFFlashAddress",id:"struct-SEFFlashAddress",level:2},{value:"Members of SEFFlashAddress",id:"members-of-sefflashaddress",level:4},{value:"SEFDieMap",id:"struct-SEFDieMap",level:2},{value:"Members of SEFDieMap",id:"members-of-sefdiemap",level:4},{value:"SEFWeights",id:"struct-SEFWeights",level:2},{value:"Members of SEFWeights",id:"members-of-sefweights",level:4},{value:"SEFVirtualDeviceInfo",id:"struct-SEFVirtualDeviceInfo",level:2},{value:"Members of SEFVirtualDeviceInfo",id:"members-of-sefvirtualdeviceinfo",level:4},{value:"SEFFMQAssignments",id:"struct-SEFFMQAssignments",level:2},{value:"Members of SEFFMQAssignments",id:"members-of-seffmqassignments",level:4},{value:"SEFSuperBlockRecord",id:"struct-SEFSuperBlockRecord",level:2},{value:"Members of SEFSuperBlockRecord",id:"members-of-sefsuperblockrecord",level:4},{value:"SEFQoSDomainInfo",id:"struct-SEFQoSDomainInfo",level:2},{value:"Members of SEFQoSDomainInfo",id:"members-of-sefqosdomaininfo",level:4},{value:"SEFWearInfo",id:"struct-SEFWearInfo",level:2},{value:"Members of SEFWearInfo",id:"members-of-sefwearinfo",level:4},{value:"SEFRefreshInfo",id:"struct-SEFRefreshInfo",level:2},{value:"Members of SEFRefreshInfo",id:"members-of-sefrefreshinfo",level:4},{value:"SEFCheckInfo",id:"struct-SEFCheckInfo",level:2},{value:"Members of SEFCheckInfo",id:"members-of-sefcheckinfo",level:4},{value:"SEFUserAddressRecovery",id:"struct-SEFUserAddressRecovery",level:2},{value:"Members of SEFUserAddressRecovery",id:"members-of-sefuseraddressrecovery",level:4},{value:"SEFUserAddressRecord",id:"struct-SEFUserAddressRecord",level:2},{value:"Members of SEFUserAddressRecord",id:"members-of-sefuseraddressrecord",level:4},{value:"SEFWriteOverrides",id:"struct-SEFWriteOverrides",level:2},{value:"Members of SEFWriteOverrides",id:"members-of-sefwriteoverrides",level:4},{value:"SEFReadOverrides",id:"struct-SEFReadOverrides",level:2},{value:"Members of SEFReadOverrides",id:"members-of-sefreadoverrides",level:4},{value:"SEFAllocateOverrides",id:"struct-SEFAllocateOverrides",level:2},{value:"Members of SEFAllocateOverrides",id:"members-of-sefallocateoverrides",level:4},{value:"SEFCopySource",id:"struct-SEFCopySource",level:2},{value:"Members of SEFCopySource",id:"members-of-sefcopysource",level:4},{value:"SEFUserAddressFilter",id:"struct-SEFUserAddressFilter",level:2},{value:"Members of SEFUserAddressFilter",id:"members-of-sefuseraddressfilter",level:4},{value:"SEFAddressChangeRequest",id:"struct-SEFAddressChangeRequest",level:2},{value:"Members of SEFAddressChangeRequest",id:"members-of-sefaddresschangerequest",level:4},{value:"SEFCopyOverrides",id:"struct-SEFCopyOverrides",level:2},{value:"Members of SEFCopyOverrides",id:"members-of-sefcopyoverrides",level:4}],s={toc:m},o="wrapper";function p(t){let{components:e,...a}=t;return(0,n.kt)(o,(0,r.Z)({},s,a,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"common-structures"},"Common Structures"),(0,n.kt)("h2",{id:"struct-SEFStatus"},"SEFStatus"),(0,n.kt)("h4",{id:"members-of-sefstatus"},"Members of SEFStatus"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"int64_t"),(0,n.kt)("td",{parentName:"tr",align:null},"error"),(0,n.kt)("td",{parentName:"tr",align:null},"Status information")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"int64_t"),(0,n.kt)("td",{parentName:"tr",align:null},"info"),(0,n.kt)("td",{parentName:"tr",align:null},"Additional context-based descriptive information")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFVirtualDeviceID"},"SEFVirtualDeviceID"),(0,n.kt)("h4",{id:"members-of-sefvirtualdeviceid"},"Members of SEFVirtualDeviceID"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"id")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFQoSDomainID"},"SEFQoSDomainID"),(0,n.kt)("h4",{id:"members-of-sefqosdomainid"},"Members of SEFQoSDomainID"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"id")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFPlacementID"},"SEFPlacementID"),(0,n.kt)("h4",{id:"members-of-sefplacementid"},"Members of SEFPlacementID"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"id")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFInfo"},"SEFInfo"),(0,n.kt)("h4",{id:"members-of-sefinfo"},"Members of SEFInfo"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"char","[8]"),(0,n.kt)("td",{parentName:"tr",align:null},"vendor"),(0,n.kt)("td",{parentName:"tr",align:null},"Vendor field")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"char","[20]"),(0,n.kt)("td",{parentName:"tr",align:null},"serialNumber"),(0,n.kt)("td",{parentName:"tr",align:null},"Device serial number")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"char","[8]"),(0,n.kt)("td",{parentName:"tr",align:null},"FWVersion"),(0,n.kt)("td",{parentName:"tr",align:null},"Device firmware version")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"char","[8]"),(0,n.kt)("td",{parentName:"tr",align:null},"HWVersion"),(0,n.kt)("td",{parentName:"tr",align:null},"Device hardware version")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"maxQoSDomains"),(0,n.kt)("td",{parentName:"tr",align:null},"Hardware version specific, may be less than 65535 defined by architecture")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"maxRootPointers"),(0,n.kt)("td",{parentName:"tr",align:null},"Firmware version specific, may be less than 16 defined by architecture")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint64_t"),(0,n.kt)("td",{parentName:"tr",align:null},"supportedOptions"),(0,n.kt)("td",{parentName:"tr",align:null},"Bitmap of supported features")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"maxPlacementIDs"),(0,n.kt)("td",{parentName:"tr",align:null},"Firmware version specific, max number of open superblocks per QoS domain")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"numFlashMediaQueues"),(0,n.kt)("td",{parentName:"tr",align:null},"Firmware version specific, max number of scheduling queues per die")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"numVirtualDevices"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of currently defined virtual devices")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"numQoSDomains"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of currently defined QoS Domains")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"APIVersion"),(0,n.kt)("td",{parentName:"tr",align:null},"API Version")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"numDies"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of dies per channel")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"numChannels"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of channels per SEF Unit")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"numPlanes"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of planes per die")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"numADUSizes"),(0,n.kt)("td",{parentName:"tr",align:null},"Size of ADUsize array that follows at end of structure")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"reserved","_","0"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"numBlocks"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of blocks per die")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"numPages"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of pages per block")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"pageSize"),(0,n.kt)("td",{parentName:"tr",align:null},"Physical page size")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"metaSize"),(0,n.kt)("td",{parentName:"tr",align:null},"Meta size per ADU")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"totalBandWidth"),(0,n.kt)("td",{parentName:"tr",align:null},"Total bandwidth corresponding to the underlying NAND component on this device")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"readLatency"),(0,n.kt)("td",{parentName:"tr",align:null},"Read latency corresponding to the underlying NAND components on this device")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"writeLatency"),(0,n.kt)("td",{parentName:"tr",align:null},"Write latency corresponding to the underlying NAND components on this device")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"eraseLatency"),(0,n.kt)("td",{parentName:"tr",align:null},"Erase latency corresponding to the underlying NAND components on this device")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"openExpirationPeriod"),(0,n.kt)("td",{parentName:"tr",align:null},"Granularity in seconds for entire block")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t","[0]"),(0,n.kt)("td",{parentName:"tr",align:null},"ADUsize"),(0,n.kt)("td",{parentName:"tr",align:null},"Array of supported ADU sizes (in bytes)")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFVirtualDeviceList"},"SEFVirtualDeviceList"),(0,n.kt)("h4",{id:"members-of-sefvirtualdevicelist"},"Members of SEFVirtualDeviceList"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"numVirtualDevices"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of virtual devices")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"struct SEFVirtualDeviceID","[0]"),(0,n.kt)("td",{parentName:"tr",align:null},"virtualDeviceID"),(0,n.kt)("td",{parentName:"tr",align:null},"An Array of all Virtual device IDs")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFQoSDomainList"},"SEFQoSDomainList"),(0,n.kt)("h4",{id:"members-of-sefqosdomainlist"},"Members of SEFQoSDomainList"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"numQoSDomains"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of QoS domains")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"struct SEFQoSDomainID","[0]"),(0,n.kt)("td",{parentName:"tr",align:null},"QoSDomainID"),(0,n.kt)("td",{parentName:"tr",align:null},"An Array of all QoS Domain IDs")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFUserAddress"},"SEFUserAddress"),(0,n.kt)("p",null,"Structure of SEFUserAddress may be redefined by user.\nThe limitations for redefining the structure are: - size must be metaSize from ",(0,n.kt)("ref",{refid:"struct_s_e_f_info",kindref:"compound"},"SEFInfo")," struct, 8 bytes for foreseeable future"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Value of 0xFFFFFFFFFFFFFFFF is reserved"),(0,n.kt)("li",{parentName:"ul"},"multi-adu writes will auto increment the LBA value")),(0,n.kt)("p",null,"For kSuperblock, the LBA is limited to 40 bits and the meta to 24. The bits member is in little endian format. "),(0,n.kt)("h4",{id:"members-of-sefuseraddress"},"Members of SEFUserAddress"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint64","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"unformatted")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFFlashAddress"},"SEFFlashAddress"),(0,n.kt)("p",null,"Opaque flash address value parsable by SEFParseFlashAddress()"),(0,n.kt)("h4",{id:"members-of-sefflashaddress"},"Members of SEFFlashAddress"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint64","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"bits")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFDieMap"},"SEFDieMap"),(0,n.kt)("h4",{id:"members-of-sefdiemap"},"Members of SEFDieMap"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8_t"),(0,n.kt)("td",{parentName:"tr",align:null},"startChannel"),(0,n.kt)("td",{parentName:"tr",align:null},"starting channel number for rectangular region")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8_t"),(0,n.kt)("td",{parentName:"tr",align:null},"startBank"),(0,n.kt)("td",{parentName:"tr",align:null},"starting bank number for rectangular region")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8_t"),(0,n.kt)("td",{parentName:"tr",align:null},"numChannels"),(0,n.kt)("td",{parentName:"tr",align:null},"width for rectangular region")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8_t"),(0,n.kt)("td",{parentName:"tr",align:null},"numBanks"),(0,n.kt)("td",{parentName:"tr",align:null},"height for rectangular region")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFWeights"},"SEFWeights"),(0,n.kt)("p",null,"Relative die time weights for basic operations. "),(0,n.kt)("h4",{id:"members-of-sefweights"},"Members of SEFWeights"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"readWeight"),(0,n.kt)("td",{parentName:"tr",align:null},"Default Weight for a Read operation by Read commands")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"eraseWeight"),(0,n.kt)("td",{parentName:"tr",align:null},"Default Weight for an Erase operation by SEFAllocateSuperBlock for user Nameless writes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"programWeight"),(0,n.kt)("td",{parentName:"tr",align:null},"Default Weight for a Program operation by Nameless Write commands")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"read4CopyWeight"),(0,n.kt)("td",{parentName:"tr",align:null},"Default Weight for a Read operation by Nameless Copy commands")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"erase4CopyWeight"),(0,n.kt)("td",{parentName:"tr",align:null},"Default Weight for an Erase operation by SEFAllocateSuperBlock for Nameless Copy")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"program4CopyWeight"),(0,n.kt)("td",{parentName:"tr",align:null},"Default Weight for a Program operation by Nameless Copy commands")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFVirtualDeviceInfo"},"SEFVirtualDeviceInfo"),(0,n.kt)("h4",{id:"members-of-sefvirtualdeviceinfo"},"Members of SEFVirtualDeviceInfo"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint64_t"),(0,n.kt)("td",{parentName:"tr",align:null},"flashCapacity"),(0,n.kt)("td",{parentName:"tr",align:null},"Flash capacity in ADUs")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint64_t"),(0,n.kt)("td",{parentName:"tr",align:null},"flashAvailable"),(0,n.kt)("td",{parentName:"tr",align:null},"Available flash capacity in ADUs")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"superBlockCapacity"),(0,n.kt)("td",{parentName:"tr",align:null},"Total SuperBlock capacity in ADUs")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"eraseCount"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of superblocks erased. Used to populate eraseOrder in SEFSuperBlockRecord")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"struct SEFDieMap"),(0,n.kt)("td",{parentName:"tr",align:null},"dieMap"),(0,n.kt)("td",{parentName:"tr",align:null},"Dies allocated to this virtual device")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"struct SEFWeights","[SEFMaxFMQueues]"),(0,n.kt)("td",{parentName:"tr",align:null},"weights"),(0,n.kt)("td",{parentName:"tr",align:null},"Weights for each FMQ")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8_t"),(0,n.kt)("td",{parentName:"tr",align:null},"numFMQueues"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of flash media queues per die")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"enum SEFDefectManagementMethod"),(0,n.kt)("td",{parentName:"tr",align:null},"defectStrategy"),(0,n.kt)("td",{parentName:"tr",align:null},"Defect management strategy for the Virtual Device")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8_t"),(0,n.kt)("td",{parentName:"tr",align:null},"averagePEcount"),(0,n.kt)("td",{parentName:"tr",align:null},"Average program/erase count")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8_t"),(0,n.kt)("td",{parentName:"tr",align:null},"maxPEcount"),(0,n.kt)("td",{parentName:"tr",align:null},"Max program/erase count")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"numUnallocatedSuperBlocks"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of unallocated super blocks")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"numSuperBlocks"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of allocated super blocks")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"struct SEFQoSDomainList"),(0,n.kt)("td",{parentName:"tr",align:null},"QoSDomains"),(0,n.kt)("td",{parentName:"tr",align:null},"List of domains")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFFMQAssignments"},"SEFFMQAssignments"),(0,n.kt)("h4",{id:"members-of-seffmqassignments"},"Members of SEFFMQAssignments"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8_t"),(0,n.kt)("td",{parentName:"tr",align:null},"readFMQ"),(0,n.kt)("td",{parentName:"tr",align:null},"Default FMQ for user read commands")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8_t"),(0,n.kt)("td",{parentName:"tr",align:null},"programFMQ"),(0,n.kt)("td",{parentName:"tr",align:null},"Default FMQ for user nameless write commands")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8_t"),(0,n.kt)("td",{parentName:"tr",align:null},"read4CopyFMQ"),(0,n.kt)("td",{parentName:"tr",align:null},"Default FMQ for read by nameless copy commands")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8_t"),(0,n.kt)("td",{parentName:"tr",align:null},"program4CopyFMQ"),(0,n.kt)("td",{parentName:"tr",align:null},"Default FMQ for write by nameless copy commands")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFSuperBlockRecord"},"SEFSuperBlockRecord"),(0,n.kt)("h4",{id:"members-of-sefsuperblockrecord"},"Members of SEFSuperBlockRecord"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"struct SEFFlashAddress"),(0,n.kt)("td",{parentName:"tr",align:null},"flashAddress"),(0,n.kt)("td",{parentName:"tr",align:null},"Flash address where this superblock resides")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"eraseOrder"),(0,n.kt)("td",{parentName:"tr",align:null},"Indication of when a superblock was erased. Can be used to determine the order blocks were allocated or to version a superblock. Values only increase over time and are unique at the virtual device level")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"writableADUs"),(0,n.kt)("td",{parentName:"tr",align:null},"If superblock is closed, writableADUs and writtenADUs are equal; if they are not equal, the superblock must still be open")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"writtenADUs"),(0,n.kt)("td",{parentName:"tr",align:null},"This field increments as ADUs in the superblock are written")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"struct SEFPlacementID"),(0,n.kt)("td",{parentName:"tr",align:null},"placementID"),(0,n.kt)("td",{parentName:"tr",align:null},"When auto-allocated, indicates the placement id supplied to SEFWriteWithoutPhysicalAddress1(). Otherwise it will be 0xffff")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8_t"),(0,n.kt)("td",{parentName:"tr",align:null},"PEIndex"),(0,n.kt)("td",{parentName:"tr",align:null},"This is the block's erase count normalized to be between 0 and 255")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFQoSDomainInfo"},"SEFQoSDomainInfo"),(0,n.kt)("h4",{id:"members-of-sefqosdomaininfo"},"Members of SEFQoSDomainInfo"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"struct SEFVirtualDeviceID"),(0,n.kt)("td",{parentName:"tr",align:null},"virtualDeviceID"),(0,n.kt)("td",{parentName:"tr",align:null},"Virtual device ID")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"numPlacementIDs"),(0,n.kt)("td",{parentName:"tr",align:null},"Specifies the number of Placement IDs corresponding to this QoS domain")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"numRootPointers"),(0,n.kt)("td",{parentName:"tr",align:null},"Specifies the number of root pointers corresponding to this QoS domain")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8_t"),(0,n.kt)("td",{parentName:"tr",align:null},"encryption"),(0,n.kt)("td",{parentName:"tr",align:null},"0 for disabled, non-zero for enabled")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"enum SEFAPIIdentifier"),(0,n.kt)("td",{parentName:"tr",align:null},"api"),(0,n.kt)("td",{parentName:"tr",align:null},"Specifies the API Identifier for this QoS domain")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint64_t"),(0,n.kt)("td",{parentName:"tr",align:null},"capacity"),(0,n.kt)("td",{parentName:"tr",align:null},"Reserved capacity of the QoS domain in ADUs")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint64_t"),(0,n.kt)("td",{parentName:"tr",align:null},"quota"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of ADUs that can be allocated by the QoS domain")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"enum SEFErrorRecoveryMode"),(0,n.kt)("td",{parentName:"tr",align:null},"recoveryMode"),(0,n.kt)("td",{parentName:"tr",align:null},"Specifies the recovery mode for this QoS domain")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"enum SEFDeadlineType"),(0,n.kt)("td",{parentName:"tr",align:null},"deadline"),(0,n.kt)("td",{parentName:"tr",align:null},"Deadline type for the QoS domain")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"struct SEFFMQAssignments"),(0,n.kt)("td",{parentName:"tr",align:null},"FMQDefaults"),(0,n.kt)("td",{parentName:"tr",align:null},"The default die FMQ assignments for I/O commands")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"reserved","_","0"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"struct SEFFlashAddress","[SEFMaxRootPointer]"),(0,n.kt)("td",{parentName:"tr",align:null},"rootPointers"),(0,n.kt)("td",{parentName:"tr",align:null},"List of root pointers")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"ADUsize"),(0,n.kt)("td",{parentName:"tr",align:null},"Size of ADU in bytes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"numSuperBlocks"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of superblocks in use by the QoS Domain")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"struct SEFSuperBlockRecord","[0]"),(0,n.kt)("td",{parentName:"tr",align:null},"superBlockRecords"),(0,n.kt)("td",{parentName:"tr",align:null},"List of superblock records")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFWearInfo"},"SEFWearInfo"),(0,n.kt)("h4",{id:"members-of-sefwearinfo"},"Members of SEFWearInfo"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"numSuperBlocks"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of superblocks")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"reserved","_","0"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"struct SEFSuperBlockRecord","[0]"),(0,n.kt)("td",{parentName:"tr",align:null},"superBlockRecords"),(0,n.kt)("td",{parentName:"tr",align:null},"List of superblock records")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFRefreshInfo"},"SEFRefreshInfo"),(0,n.kt)("h4",{id:"members-of-sefrefreshinfo"},"Members of SEFRefreshInfo"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"numSuperBlocks"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of superblocks")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"reserved","_","0"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"struct SEFSuperBlockRecord","[0]"),(0,n.kt)("td",{parentName:"tr",align:null},"superBlockRecords"),(0,n.kt)("td",{parentName:"tr",align:null},"List of superblock records")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFCheckInfo"},"SEFCheckInfo"),(0,n.kt)("p",null,"Super blocks returned by SEFGetCheckList()"),(0,n.kt)("h4",{id:"members-of-sefcheckinfo"},"Members of SEFCheckInfo"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"numSuperBlocks"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of superblocks")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"reserved","_","0"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"struct SEFSuperBlockRecord","[0]"),(0,n.kt)("td",{parentName:"tr",align:null},"superBlockRecords"),(0,n.kt)("td",{parentName:"tr",align:null},"List of superblock records")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFUserAddressRecovery"},"SEFUserAddressRecovery"),(0,n.kt)("h4",{id:"members-of-sefuseraddressrecovery"},"Members of SEFUserAddressRecovery"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint64_t"),(0,n.kt)("td",{parentName:"tr",align:null},"serial"),(0,n.kt)("td",{parentName:"tr",align:null},"Monotonically increasing generational counter that indicates the order in which blocks were written. For example, it can be used for replay for data recovery")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"struct SEFUserAddress"),(0,n.kt)("td",{parentName:"tr",align:null},"userAddress"),(0,n.kt)("td",{parentName:"tr",align:null},"Contains LBA information")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFUserAddressRecord"},"SEFUserAddressRecord"),(0,n.kt)("h4",{id:"members-of-sefuseraddressrecord"},"Members of SEFUserAddressRecord"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"numADUs"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of ADUs")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"reserved","_","0"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"struct SEFUserAddressRecovery","[0]"),(0,n.kt)("td",{parentName:"tr",align:null},"userAddressesRecovery"),(0,n.kt)("td",{parentName:"tr",align:null},"User address recovery scheme")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFWriteOverrides"},"SEFWriteOverrides"),(0,n.kt)("p",null,"Supplied to override default write FMQ and weights.\nMay be used when calling SEFWriteWithoutPhysicalAddress1() or SEFWriteWithoutPhysicalAddress1Async(). Any of these fields can be set to -1 to use the default "),(0,n.kt)("h4",{id:"members-of-sefwriteoverrides"},"Members of SEFWriteOverrides"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"eraseWeight"),(0,n.kt)("td",{parentName:"tr",align:null},"Weight to use for erase instead of virtual device default")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"programWeight"),(0,n.kt)("td",{parentName:"tr",align:null},"Weight to use for program instead of virtual device default")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8_t"),(0,n.kt)("td",{parentName:"tr",align:null},"programFMQ"),(0,n.kt)("td",{parentName:"tr",align:null},"Flash Media Queue to use for erase & write instead of QoS Domain default")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFReadOverrides"},"SEFReadOverrides"),(0,n.kt)("p",null,"Supplied to override default read FMQ and weight.\nMay be used when calling SEFReadWithPhysicalAddress1() or SEFReadWithPhysicalAddress1Async(). Any of these fields can be set to -1 to use the default "),(0,n.kt)("h4",{id:"members-of-sefreadoverrides"},"Members of SEFReadOverrides"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"readWeight"),(0,n.kt)("td",{parentName:"tr",align:null},"Weight to use for read instead of virtual device default")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8_t"),(0,n.kt)("td",{parentName:"tr",align:null},"readFMQ"),(0,n.kt)("td",{parentName:"tr",align:null},"Flash Media Queue to use for read instead of QoS Domain default")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFAllocateOverrides"},"SEFAllocateOverrides"),(0,n.kt)("p",null,"Supplied to override default superblock allocation FMQ and weight.\nMay be used when calling SEFAllocateSuperBlock() or SEFAllocateSuperBlockAsync(). Any of these fields can be set to -1 to use the default "),(0,n.kt)("h4",{id:"members-of-sefallocateoverrides"},"Members of SEFAllocateOverrides"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"eraseWeight"),(0,n.kt)("td",{parentName:"tr",align:null},"Weight to use for erase instead of virtual device default")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8_t"),(0,n.kt)("td",{parentName:"tr",align:null},"eraseFMQ"),(0,n.kt)("td",{parentName:"tr",align:null},"Flash Media Queue to use for erase instead of QoS Domain default")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFCopySource"},"SEFCopySource"),(0,n.kt)("p",null,"Source addresses for SEFNamelessCopy().\nThe Source addresses format controls if the validBitmap or list of flash addresses is used.SEFNamelessCopy()SEFUserAddressFilter"),(0,n.kt)("h4",{id:"members-of-sefcopysource"},"Members of SEFCopySource"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"enum SEFCopySourceType"),(0,n.kt)("td",{parentName:"tr",align:null},"format"),(0,n.kt)("td",{parentName:"tr",align:null},"Specifies the format to use")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8_t","[3]"),(0,n.kt)("td",{parentName:"tr",align:null},"reserved","_","0"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"arraySize"),(0,n.kt)("td",{parentName:"tr",align:null},"Number of items in bitmap array or Flash Address List (QWORD count)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"struct SEFFlashAddress"),(0,n.kt)("td",{parentName:"tr",align:null},"srcFlashAddress"),(0,n.kt)("td",{parentName:"tr",align:null},"flash address of source block. ADU & ~0x3f indicates the ADU of bit 0 of validBitmap and ADU & 0x3f is the starting bit in validBiMap")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint64_t *"),(0,n.kt)("td",{parentName:"tr",align:null},"validBitmap"),(0,n.kt)("td",{parentName:"tr",align:null},"pointer to COPY of valid bitmap array (little endian), memory allocated by SEFPrepareBufferForNamelessCopy()")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"struct SEFFlashAddress *"),(0,n.kt)("td",{parentName:"tr",align:null},"flashAddressList"),(0,n.kt)("td",{parentName:"tr",align:null},"pointer to flash address list, memory allocated by SEFPrepareBufferForNamelessCopy()")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFUserAddressFilter"},"SEFUserAddressFilter"),(0,n.kt)("p",null,"Optional filtering on user address data during copy. "),(0,n.kt)("h4",{id:"members-of-sefuseraddressfilter"},"Members of SEFUserAddressFilter"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"struct SEFUserAddress"),(0,n.kt)("td",{parentName:"tr",align:null},"userAddressStart"),(0,n.kt)("td",{parentName:"tr",align:null},"Starting user address of filter")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint64_t"),(0,n.kt)("td",{parentName:"tr",align:null},"userAddressRangeLength"),(0,n.kt)("td",{parentName:"tr",align:null},"Length of filter range (0 indicates no filtering)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32_t"),(0,n.kt)("td",{parentName:"tr",align:null},"userAddressRangeType"),(0,n.kt)("td",{parentName:"tr",align:null},"Zero to copy data in range; non-zero to copy outside of range")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFAddressChangeRequest"},"SEFAddressChangeRequest"),(0,n.kt)("p",null,"Address change records.\nThis structure is used internally to implement SEFProcessChangeAddressRequest(). It may change in the future so it should be treated as opaque. "),(0,n.kt)("h4",{id:"members-of-sefaddresschangerequest"},"Members of SEFAddressChangeRequest"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numProcessedADUs")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"nextADUOffset")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint32","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numReadErrorADUs")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"numDefectivePlanes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16","_","t"),(0,n.kt)("td",{parentName:"tr",align:null},"reserved")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"struct SEFFlashAddress"),(0,n.kt)("td",{parentName:"tr",align:null},"startingDstFlashAddress")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"struct SEFUserAddress","[0]"),(0,n.kt)("td",{parentName:"tr",align:null},"userAddress")))),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"struct-SEFCopyOverrides"},"SEFCopyOverrides"),(0,n.kt)("p",null,"Flash Media Queue overrides for SEFNamelessCopy()\nWhen any of these fields are set to ~0, the default weight is used as defined by SEFCreateVirtualDevice() and default FMQ as defined by SEFCreateQoSDomain(). "),(0,n.kt)("h4",{id:"members-of-sefcopyoverrides"},"Members of SEFCopyOverrides"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"readWeight"),(0,n.kt)("td",{parentName:"tr",align:null},"Weight to use for read instead of virtual device default")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"eraseWeight"),(0,n.kt)("td",{parentName:"tr",align:null},"Weight to use for erase instead of virtual device default")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint16_t"),(0,n.kt)("td",{parentName:"tr",align:null},"programWeight"),(0,n.kt)("td",{parentName:"tr",align:null},"Weight to use for program instead of virtual device default")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8_t"),(0,n.kt)("td",{parentName:"tr",align:null},"readFMQ"),(0,n.kt)("td",{parentName:"tr",align:null},"Flash Media Queue to use for read instead of QoS Domain default")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"uint8_t"),(0,n.kt)("td",{parentName:"tr",align:null},"programFMQ"),(0,n.kt)("td",{parentName:"tr",align:null},"Flash Media Queue to use for erase & write instead of QoS Domain default")))),(0,n.kt)("hr",null))}p.isMDXComponent=!0}}]);
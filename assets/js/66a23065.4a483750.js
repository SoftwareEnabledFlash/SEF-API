"use strict";(self.webpackChunkweb_doc=self.webpackChunkweb_doc||[]).push([[442],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(n),m=i,h=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return n?a.createElement(h,r(r({ref:t},c),{},{components:n})):a.createElement(h,r({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var d=2;d<o;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6858:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return p}});var a=n(7462),i=n(3366),o=(n(7294),n(3905)),r=["components"],s={sidebar_position:7},l="QoS Domains",d={unversionedId:"qos-domains",id:"qos-domains",title:"QoS Domains",description:"chap-QoSDomain}",source:"@site/docs/qos-domains.md",sourceDirName:".",slug:"/qos-domains",permalink:"/SEF-API/qos-domains",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Virtual Devices",permalink:"/SEF-API/virtual-devices"},next:{title:"Super Pages",permalink:"/SEF-API/super-pages"}},c={},p=[{value:"Figure 5: QoS Domain Example",id:"fig-QoSDomainExample",level:4},{value:"Creation-time Parameters",id:"creation-time-parameters",level:2}],u={toc:p};function m(e){var t=e.components,s=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"chap-QoSDomain"},"QoS Domains"),(0,o.kt)("p",null,"A QoS domain is the mechanism used to access data within a SEF Unit. QoS domains are created\nwithin a virtual device, and it is possible to have multiple QoS domains sharing a single virtual\ndevice. When multiple QoS domains share a virtual device, they will draw from a common pool of\nsuper blocks. However a super block is never shared between QoS domains and so data for QoS\ndomains will never be intermingled in a super block. When QoS domains share a virtual device,\nthere is no hardware isolation between them, so die-time conflicts are possible. The scheduling and\nprioritization features of SEF are used to order I/O for shared virtual devices and to resolve these\ndie-time conflicts (e.g., software-defined isolation/quality of service)."),(0,o.kt)("p",null,"When a QoS domain is created, several parameters are specified to define the characteristics\nof the QoS domain, which will be discussed below. Upon successful creation of a QoS domain,\na device node will be created in the operating system namespace corresponding to the newly\ncreated QoS domain. It has a capacity and quota. The capacity is storage reserved in the virtual\ndevice for use by the QoS domain. The quota is how much total storage can be assigned to\nthe QoS domain. Initially the quota is set to the capacity, but both can be changed later using\n",(0,o.kt)("a",{parentName:"p",href:"/SEF-API/SEF_API/sef-api00#function-SEFSetQoSDomainCapacity"},"SEFSetQoSDomainCapacity"),". At boot time the SEF Unit\ndriver will create device nodes for all QoS domains previously defined for the device. Device nodes for\nQoS domains may be used to enumerate existing QoS domains as well as to restrict access to/enforce\nownership of a QoS domain. All user data access commands are issued against a QoS domain.\nTypically, a QoS domain will be used by a single application or Flash Translation Layer/block\ndriver/key value driver.\nAn example of how the virtual devices of a SEF Unit could be divided into QoS domains is shown\nin the following figure ",(0,o.kt)("a",{parentName:"p",href:"#fig-QoSDomainExample"},"5"),". A QoS domain is a logical construct that\ndefines a capacity taken from its virtual device's capacity. It also defines a quota that may exceed\nthe capacity of the virtual device as shown with QoS domains three through four. A SEF Unit can\nhave at most 65534 QoS domains defined. The actual limit depends on the specific hardware."),(0,o.kt)("h4",{id:"fig-QoSDomainExample"},"Figure 5: QoS Domain Example"),(0,o.kt)("p",null,(0,o.kt)("img",{loading:"lazy",alt:"QoS Domain Example",src:n(3872).Z,width:"869",height:"529"})),(0,o.kt)("p",null,"Allocated super blocks are owned by only one QoS domain at a time and are never shared. Super\nblocks are allocated from a shared pool allowing for host-managed thin provisioning. A QoS domain\ncan allocate super blocks until it hits its quota or the free pool is exhausted."),(0,o.kt)("h2",{id:"creation-time-parameters"},"Creation-time Parameters"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"vdHandle"),": the handle to the virtual device the QoS domain will be created in."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"QoSDomainID"),": an identifier that will later be used to specify the created QoS domain. This iden-\ntifier must be unique across the entire SEF Unit. Valid IDs start at 1 and must be less than or equal\nto ",(0,o.kt)("inlineCode",{parentName:"p"},"maxQoSDomains")," returned by ",(0,o.kt)("a",{parentName:"p",href:"/SEF-API/SEF_API/sef-api00#function-SEFGetInformation"},"SEFGetInformation"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"flashCapacity"),": the number of 4KiB ADUs reserved for the QoS domain. It is subtracted from\nthe available ADUs from the virtual device so must be less than the currently available ADUs. This\nis also used as the initial value for flashQuota."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"pSLCFlashCapacity"),": the number of 4KiB pSLC ADUs reserved for the QoS domain. It is\nsubtracted from the available pSLC ADUs from the virtual device so must be less than the currently\navailable pSLC ADUs. This is also used as the initial value for pSLCFlashQuota."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"ADUIndex"),": this is the index into the ADUSize[] array in ",(0,o.kt)("inlineCode",{parentName:"p"},"SEFInfo")," returned by\n",(0,o.kt)("a",{parentName:"p",href:"/SEF-API/SEF_API/sef-api00#function-SEFGetInformation"},"SEFGetInformation")," to select the data and metadata sizes of an\nADU."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"api"),": this field specifies the API to be used for this QoS domain. Currently only the super block\nAPI is supported."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"defectStrategy"),": Specifies how defective ADUs are handled by the QoS domain. The choices are\nPerfect, Packed or Fragmented. The Perfect strategy hides defective ADUs through overprovisioning\nand mapping. Capacity is reserved, and ADUs are remapped to provide static and consistent flash\nmemory addresses with contiguous ADU offsets. Packed also hides defective ADUs presenting\nconsistent flash memory addresses with contiguous ADU offsets, but the size of super blocks will\nshrink as the device wears. With the Fragmented strategy, the client is exposed to the device's\ndefect management. ADU offsets are non-contiguous, and super blocks will shrink in size as the\ndevice wears. Refer to ",(0,o.kt)("a",{parentName:"p",href:"/SEF-API/addressing#chap-Addressing"},"Addressing")," Chapter for more details."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"recovery"),": Specifies the error recovery strategy for this QoS domain."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"encryption"),": specifies the key the QoS domain is to be encrypted with."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"numPlacementIDs"),": specifies the number of separate, simultaneously opened super blocks that\nmay be used by the QoS domain in auto allocation mode. It does not affect the number of manually\nopened super blocks, which instead depends on the device itself."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"maxOpenSuperBlocks"),": this is the maximum number super blocks that can be open in a QoS\ndomain. If less than numPlacementIDs it will be set to numPlacementIDs+2. This affects resource\nand memory usage in the device."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"defaultReadQueue"),": specifies the default read queue to use for read I/O operations. This can\nbe optionally overridden when submitting I/O to a QoS domain. Read queues are defined by the\nvirtual device and shared by the QoS domains defined in the same virtual device."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"weights"),": Specifies the default weights for erase and program."))}m.isMDXComponent=!0},3872:function(e,t,n){t.Z=n.p+"assets/images/qos-domain-example-fdadb5c12d23039c0223d5a956707753.png"}}]);